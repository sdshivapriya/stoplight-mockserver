---
swagger: "2.0"
info:
  description: |
    This API manages shopping cart resources, enabling the retrieval of shopping carts with their items, prices, total price, related party, notes, channel, and configuration of those items. It also enables adding, deleting, and modifying items in the cart and deleting the shopping cart.
     ###### TMF663_Shopping_Cart_API_REST_Specification_R18.0.2
  version: "2.0"
  title: Shopping Cart Management
  contact:
    name: Amdocs Inc.
    url: http://www.amdocs.com
    email: support@amdocs.com
  license:
    name: Amdocs Inc.
    url: http://
  x-amdocs:
    exposed: public
    service-principals:
    - shoppingcart-shoppingcart-app-id
    - shoppingcart-modify-app-id
    - shoppingcart-checkout-app-id
    - shoppingcart-price-app-id
    - shoppingcart-validate-app-id
host: amdocs.com
basePath: /shoppingCart/v2.0
tags:
- name: shoppingCart
- name: shoppingCartValidate
- name: shoppingCartPrice
- name: cartItem
- name: checkout
- name: productModification
schemes:
- https
paths:
  /shoppingCart:
    get:
      tags:
      - shoppingCart
      summary: List shopping carts
      description: "This operation lists the shopping cart entities. \nThe list can be filtered by the *filter* parameter. This operation enables retrieving expired/non-expired carts. \n\n###### TMF Open API complaint\n\n**Business rules&#58;**\n  Returns all shopping carts if includeExpiredShoppingCart set to true, if this parameter is set to false, return only non expired shopping carts.\n\n**Reference value&#58;**\n  - validFor (shopping cart that for retrieval date is in the date range of validFor)\n  - noteType (Configuration.note.cartItem.validNoteTypes)\n"
      operationId: getShoppingCarts
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: filters
        in: query
        description: "Limit the returned entities only to those that match the specified values.\nThe supported values are:\n - *relatedParty.id* &  *relatedParty.role*\n - *contactMedium.characteristic.emailAddress*\n - *contactMedium.characteristic.phoneNumber* \n<i>Example&#58; filters=relatedParty.id==200&relatedParty.role==Customer</i>\n  \n  **Reference value&#58;**\n  - relatedParty.role = Customer (Configuration.relatedPartyCustomerRole)\n"
        required: false
        type: string
      - name: limit
        in: query
        description: |
          Requested number of resources to be provided in the response requested by the client
        required: false
        type: integer
      - name: offset
        in: query
        description: "Requested index for start of page to be provided in the response requested by the client \n"
        required: false
        type: integer
      - name: mask
        in: query
        description: "A mask is a set of flags that impact the returned fields.\nThe supported values are&#58;\n  - returnAttachments - Once set, the API returns additional attachment information for the product offering and product offering terms.\n  - returnStockInformation - Once set, the stock availability information is retrieved from the stock management system.\n  - *returnCatalogMetadata* - Once set, the metadata is retrieved from the product catalog system (limited by configurable metadata type).If specific type is required, this type will be specified in the mask. \n  - *returnNote* - Once set, notes associated with CartItem are returned. If specific noteType is required, this type should be specified in the mask. \n\n<i>Example&#58; mask=returnAttachments,returnStockInformation,returnCatalogMetadata.ResourceManagement,returnNote</i>\n"
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
      - name: sort
        in: query
        description: |
          The list of fields by which the response is sorted. The supported values are &#58; <ul><li>cartDate</ul>
          Note &#58;The list of resource attributes must be comma-separated. The items are sorted according to the order of the fields listed in this parameter, from left to right. The default sorting order is ascending. To change the order to descending, the field must be specified with the minus (-) prefix. Nested resources attributes can be specified using the dot notation.
        required: false
        type: array
        items:
          type: string
          minLength: 1
        collectionFormat: multi
      - name: includeExpiredShoppingCart
        in: query
        description: "Indicates if the response should include expired shopping cart.When this idication set to true, return all shipping carts.If this indication set to false return only shopping carts that are still valid, define by configuration \n"
        required: false
        type: boolean
      responses:
        "200":
          description: |
            *OK* - The shopping carts were retrieved successfully.
          headers:
            X-Total-Count:
              type: integer
              description: |
                Total number of items matching the criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/ShoppingCart'
        "206":
          description: |
            "*Partial Content* - Partially updated shopping cart."
          schema:
            type: array
            items:
              $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_retrieve
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
    post:
      tags:
      - shoppingCart
      summary: Create shopping cart
      description: "This service creates a shopping cart with one or more items.\n  ##### TMF Open API compliant\n  **Mandatory&#58;**\n  - *productOffering* (*for add action*)\n  - *cartItem.action* \n  \n  **Readonly&#58;**\n  - *cartItem.characteristicMetadata*\n  \n  **Business rules&#58;**\n  - *modifyReason* (action must match *cartItem.action*)\n  - *relatedParty* (if exist than only 1 *relatedRarty* with role = Customer, and Customer status is Active)\n  - *cartItem* (if *cartItem* populated id and action should be populated if this != add action)\n\n  **Reference value&#58;**\n  -  *action* (*ProductOfferingConfiguration&#58; actionsPerCalculatedKeyTable.actionsPerCalculatedKeyMap*)\n  - *modifyReason.name* (*ProductOfferingConfiguration&#58; modifyReasonsTable.modifyReasonsPerAction*)\n  - *channel* (*ApplicationContext*)\n  -  *relatedParty.role* = Customer (*Configuration&#58; relatedPartyCustomerRole*)\n  - *relatedParty.status* = Active (*Configuration&#58; customerValidatorValidStatusValues*)\n  - *noteType* (*Configuration.note.cartItem.validNoteTypes*)\n"
      operationId: createShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: mask
        in: query
        description: "A mask is a set of flags that impact the returned fields.\nThe supported values are&#58;\n  - returnAttachments - Once set, the API returns additional attachment information for the product offering and product offering terms.\n  - returnStockInformation - Once set, the stock availability information is retrieved from the stock management system.\n  - *returnCatalogMetadata* - Once set, the metadata is retrieved from the product catalog system (limited by configurable metadata type).If specific type is required, this type will be specified in the mask. \n  - *returnNote* - Once set, notes associated with CartItem are returned. If specific noteType is required, this type should be specified in the mask. \n\n<i>Example&#58; mask=returnAttachments,returnStockInformation,returnCatalogMetadata.ResourceManagement,returnNote</i>\n"
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: ShoppingCart
        description: |
          This operation creates a shopping cart with one or more shopping cart items.
        required: true
        schema:
          $ref: '#/definitions/ShoppingCart'
      responses:
        "201":
          description: |
            *Created* - The shopping cart was created successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: |
            *Forbidden* - The server refuses to apply the request because the client does not have access rights to the content.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_create
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}:
    get:
      tags:
      - shoppingCart
      summary: Retrieve a shopping cart
      description: |
        This service retrieves a shopping cart according to its ID.
        ###### TMF Open API complaint

        **Reference value&#58;**
          - noteType (Configuration.note.cartItem.validNoteTypes)
      operationId: getShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          This is the ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: mask
        in: query
        description: "A mask is a set of flags that impact the returned fields.\nThe supported values are&#58;\n  - returnAttachments - Once set, the API returns additional attachment information for the product offering and product offering terms.\n  - returnStockInformation - Once set, the stock availability information is retrieved from the stock management system.\n  - *returnCatalogMetadata* - Once set, the metadata is retrieved from the product catalog system (limited by configurable metadata type).If specific type is required, this type will be specified in the mask. \n  - *returnNote* - Once set, notes associated with CartItem are returned. If specific noteType is required, this type should be specified in the mask. \n\n<i>Example&#58; mask=returnAttachments,returnStockInformation,returnCatalogMetadata.ResourceManagement,returnNote</i>\n"
        required: false
        type: string
      - name: includeExpiredShoppingCart
        in: query
        description: "Indicates if the response should include expired shopping cart.When this idication set to true, return all shipping carts.If this indication set to false return only shopping carts that are still valid, define by configuration \n"
        required: false
        type: boolean
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
      responses:
        "200":
          description: |
            *OK* - The shopping cart was retrieved successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "206":
          description: '*Partial Content* - Partially updated shopping cart.'
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_retrieve
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
    delete:
      tags:
      - shoppingCart
      summary: Delete a shopping cart
      description: |
        This operation deletes a shopping cart entity.
      operationId: deleteShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          This is the ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      responses:
        "204":
          description: |
            *No Content* - The server successfully processed the request and is not returning any content.
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_delete
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
    patch:
      tags:
      - shoppingCart
      summary: (Internal) Patch a shopping cart
      description: |
        This operation allows partial updates of a shopping cart entity, including fields only at the shopping-cart level.

        ###### TMF Open API compliant

        **Patchable elements&#58;**
        - cartItem without prices
        - cartItem.quantity
        - cartItem.action
        - cartItem.status
        - cartItem.itemTerm
        - cartItem.modifyReason
        - cartItem.modifyReson.text
        - cartItem.product.characteristic
        - cartItem.product

        any action of update the ids is not allowed in the patch

        **Reference value&#58;**
          - noteType (Configuration.note.cartItem.validNoteTypes)
      operationId: patchShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          This is the ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: mask
        in: query
        description: "A mask is a set of flags that impact the returned fields.\nThe supported values are&#58;\n  - returnAttachments - Once set, the API returns additional attachment information for the product offering and product offering terms.\n  - returnStockInformation - Once set, the stock availability information is retrieved from the stock management system.\n  - *returnCatalogMetadata* - Once set, the metadata is retrieved from the product catalog system (limited by configurable metadata type).If specific type is required, this type will be specified in the mask. \n  - *returnNote* - Once set, notes associated with CartItem are returned. If specific noteType is required, this type should be specified in the mask. \n\n<i>Example&#58; mask=returnAttachments,returnStockInformation,returnCatalogMetadata.ResourceManagement,returnNote</i>\n"
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nonPersistentOperation
        in: header
        description: |
          Indicates whether an operation is non-persistent.
          The supported values are *true* and *false*.
        required: false
        type: string
      - name: nonPersistentIdentifier
        in: header
        description: |
          Unique identifier of the non-persistent change in the cache
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
      - in: body
        name: ShoppingCartPatch
        description: |
          The patch that is requesting to update the shopping cart resource.
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/PatchElement'
      responses:
        "200":
          description: |
            *OK* - The shopping cart was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/empty:
    post:
      tags:
      - shoppingCart
      summary: Empty shopping cart
      description: |
        This service removes all cart items from the shopping cart.
      operationId: emptyShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      responses:
        "200":
          description: |
            *OK* - The shopping cart was emptied successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "304":
          description: |
            *NotModified* - The shopping cart is already empty.
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_empty
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem:
    post:
      tags:
      - cartItem
      summary: Add a cart item
      description: "This operation adds (top-most) cart items to the shopping cart entity. In case a cart item is set only with the *productOffering.id*, the created cart item will represent the default configuration for that product offering. Otherwise, the cart item will be created as-is.<p>\n**Mandatory&#58;**\n- cartItem.productOffering\n- product.id (unless cartItem represents a provide action)\n- cartItem.action\n\n\n**Readonly&#58;**\n- *cartItem.characteristicMetadata*\n  \n**Business rules&#58;**\n- *modifyReason* (action must match *cartItem.action*)\n\n\n**Reference value&#58;**\n- *action* (*ProductOfferingConfiguration&#58; actionsPerCalculatedKeyTable.actionsPerCalculatedKeyMap*)\n- *modifyReason.name *(*ProductOfferingConfiguration&#58; modifyReasonsTable.modifyReasonsPerAction*)\n- *noteType* (*Configuration.note.cartItem.validNoteTypes*)\n"
      operationId: addCartItem
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: cartItem
        description: |
          This is used to add a shopping cart item sub resource.
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/CartItem'
      responses:
        "200":
          description: |
            *OK* - The cart item was added successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}:
    get:
      tags:
      - cartItem
      summary: Retrieve a shopping cart item
      description: |
        This service retrieves the shopping cart, with the response limited to a cart item (and its associated hierarchy), by the ID of the cart item.

        **Reference value&#58;**
          - noteType (Configuration.note.cartItem.validNoteTypes)
      operationId: retrieveCartItem
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: mask
        in: query
        description: "A mask is a set of flags that impact the returned fields.\nThe supported values are&#58;\n  - returnAttachments - Once set, the API returns additional attachment information for the product offering and product offering terms.\n  - returnStockInformation - Once set, the stock availability information is retrieved from the stock management system.\n  - *returnCatalogMetadata* - Once set, the metadata is retrieved from the product catalog system (limited by configurable metadata type).If specific type is required, this type will be specified in the mask. \n  - *returnNote* - Once set, notes associated with CartItem are returned. If specific noteType is required, this type should be specified in the mask. \n\n<i>Example&#58; mask=returnAttachments,returnStockInformation,returnCatalogMetadata.ResourceManagement,returnNote</i>\n"
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
      responses:
        "200":
          description: |
            *OK* - The shopping cart, filtered by cart item, was retrieved successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        "503":
          description: |
            *Internal Server Error* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_retrieve
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
    delete:
      tags:
      - cartItem
      summary: Delete a cart Item
      description: |
        This operation deletes an cart item from a shopping cart entity.<p>
        **Business rules&#58;**
        - cartItemId (unique identifier of a top-most cart item)
      operationId: removeCartItem
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      responses:
        "200":
          description: |
            *OK* - The cart item was removed successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "204":
          description: |
            *No Content* - The server successfully processed the request and is not returning any content.
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        "503":
          description: |
            *Internal Server Error* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/manageRelatedParty:
    post:
      tags:
      - shoppingCart
      summary: Manage the related party association
      description: |
        This operation manages the association of the shopping cart entity to a related party.<p>
        **Mandatory&#58;**
        - relatedPartyId (when action = replace | remove)
        - role (when action = replace | remove)
        - RelatedPartyRef (when action = add | replace)
        - RelatedPartyRef.role (when action = add | replace)

        **Business rules&#58;**
        - relatedParty (only 1 relatedRarty per role)

        **Reference value&#58;**
        - role (Configuration.configuration.relatedParty.addRelatedPartyAllowedRoles | replaceRelatedPartyAllowedRoles | removeRelatedPartyAllowedRoles)
        - action (Configuration.configuration.relatedParty.validManageRelatedPartyActions)
      operationId: manageShoppingCartRelatedParty
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: Amdocs-Client-Id
        in: header
        description: |
          .
        required: false
        type: string
      - name: relatedPartyId
        in: query
        description: |
          The ID of the related party.
        required: false
        type: string
      - name: role
        in: query
        description: |
          The role of the related party.
        required: false
        type: string
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: RelatedPartyRef
        description: |
          The related party associated to the shopping cart. This parameter is required when the query action is "add" or "replace".
        required: false
        schema:
          $ref: '#/definitions/RelatedPartyRef'
      responses:
        "200":
          description: |
            *OK* - The related party was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageRelatedParty
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/updateQuantity:
    post:
      tags:
      - cartItem
      summary: Set quantity
      description: |
        This operation sets the *quantity* attribute of an cart item.<p>
        **Business rules&#58;**
        - cartItemId (unique identifier of a top-most cart item)
      operationId: updateCartItemQuantity
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: UpdateCartItemQuantity
        description: |
          The patch element for updating the quantity of the cart item.
        required: true
        schema:
          $ref: '#/definitions/PatchElement'
      responses:
        "200":
          description: |
            *OK* - The shopping cart item quantity was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/manageRelatedParty:
    post:
      tags:
      - cartItem
      summary: Manage the related party association
      description: |
        This operation manages the association of the cart item entity to a related party.<p>
        **Mandatory&#58;**
        - nestedCartItemID (when the associated cart item/s is/are not top-most)
        - relatedPartyId (when action = replace | remove)
        - role (when action = replace | remove)
        - RelatedPartyRef (when action = add | replace)
        - RelatedPartyRef.role (when action = add | replace)

        **Business rules&#58;**
        - relatedParty (only 1 relatedRarty per role)

        **Reference value&#58;**
        - role (Configuration.configuration.relatedParty.addManageCartItemRelatedPartyAllowedRoles | replaceManageCartItemRelatedPartyAllowedRoles | removeManageCartItemRelatedPartyAllowedRoles)
        - action (Configuration.configuration.relatedParty.validManageRelatedPartyActions)
      operationId: manageCartItemRelatedParty
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: array
        items:
          type: string
          minLength: 1
        collectionFormat: multi
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - name: relatedPartyId
        in: query
        description: |
          The ID of the related party.
        required: false
        type: string
      - name: role
        in: query
        description: |
          The role of the related party.
        required: false
        type: string
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - in: body
        name: RelatedPartyRef
        description: |
          The associated related party to the cart item. This parameter is required when the query action is "add" or "replace".
        required: false
        schema:
          $ref: '#/definitions/RelatedPartyRef'
      responses:
        "200":
          description: |
            *OK* - The related party was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageRelatedParty
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/managePlace:
    post:
      tags:
      - cartItem
      summary: Manage the place association with cart items
      description: |
        This operation manages the association of product(s) (related to the cart item entity) with a place.<p>
        **Mandatory&#58;**
        - nestedCartItemId (when the associated cart item/s is/are not top-most)
        - placeId (when action = replace | remove)
        - role (when action = replace | remove)
        - PlaceRef.id (when action = add | replace)
        - PlaceRef.role (when action = add | replace)

        **Business rules&#58;**
        - Shopping cart state is Draft
        - Product represents a newly provided product (not an owned product) when role=installation
        - place (only 1 place per role)
        - role = installation
        - The metadata of the product.productSpecification defines an installation address as Required
          (metadata.metadataType = 'Location and Serviceability' | metadata.name = 'installationAddressRequired' | metadata.value = true)
          - for role = installation

        **Reference values&#58;**
        - role (Configuration&#58; configuration.place.addManageCartItemPlaceAllowedRoles | replaceManageCartItemPlaceAllowedRoles | removeManageCartItemPlaceAllowedRoles)
        - action (Configuration&#58; configuration.place.validManagePlaceActions)
      operationId: manageCartItemPlace
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: array
        items:
          type: string
          minLength: 1
        collectionFormat: multi
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - name: propagate
        in: query
        description: "Indicates if to propagate the place management to other cart item entities \n"
        required: false
        type: boolean
        default: false
      - name: override
        in: query
        description: "Indicates if to override (already associated place) while propagate the place management to other cart item entities \n"
        required: false
        type: boolean
        default: false
      - name: placeId
        in: query
        description: |
          The ID of the place.
        required: false
        type: string
      - name: role
        in: query
        description: |
          The role of the place.
        required: false
        type: string
      - in: body
        name: PlaceRef
        description: |
          The place associated with the cart item.
        required: false
        schema:
          $ref: '#/definitions/PlaceRef'
      responses:
        "200":
          description: |
            *OK* - The association of the place with the product cart item was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageCartItemPlace
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/manageCartItemRelationship:
    post:
      tags:
      - cartItem
      summary: Manage the cart item relationship association
      description: |
        This operation manages the bi-directional association of two cart item entities by updating the cart item relationship entity.<p>
        **Mandatory&#58;**
        - replacedCartItemRelationship (when action = replace)

        **Business rules&#58;**
        - type (the Bidirectional type value is taken from configuration)
        - action (valid values per type are predefined in configuration)

        **Reference value&#58;**
        - type (Configuration&#58; configuration.cartItemRelationship.types.*)
        - action (add | replace | remove)
      operationId: manageCartItemRelationship
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          This is the shopping cart id.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - in: body
        name: ManageCartItemRelationship
        description: |
          The relationship associated to the cart item. This parameter is required when the query action is "add" or "replace".
        required: false
        schema:
          type: array
          items:
            $ref: '#/definitions/ManageCartItemRelationship'
      responses:
        "200":
          description: |
            *OK* - The related cart item relationship was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageCartItemRelationship
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/manageCartPriceInstallmentOption:
    post:
      tags:
      - cartItem
      summary: Manage installment option
      description: "This operation manages the installment option associated with the cart item. The cart price represents a one-time change of the cart item. In case the action is *remove* and the installment option (for the cart price) \nis defined as *mandatory* - the installment option will be restored to the default.<p>\n**Mandatory&#58;**\n- nestedCartItemId (when managing nested cart item/s)\n- cartPriceInstallmentOption.installmentOption (when action = add | replace)\n\n**Reference value&#58;**\n- cartPriceInstallmentOption.action (add | replace | remove)\n"
      operationId: manageCartItemInstallmentOption
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item.
        required: false
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - in: body
        name: cartPriceInstallmentOption
        description: |
          The managed installment option.
        required: true
        schema:
          $ref: '#/definitions/ManageCartPriceInstallmentOption'
      responses:
        "200":
          description: |
            *OK* - The Installment Option was managed successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/manageProductRelationship:
    post:
      tags:
      - cartItem
      summary: Manage the related product relationship
      description: |
        This operation manages one direct relation from the dependent product to independent.<p>
        **Mandatory&#58;**
        - nestedCartItemID (when the associated cart item/s is/are not top-most)
        - type (when action = replace | remove)
        - subtype (when action = replace | remove)
        - conext (when action = replace | remove)
        - productRelationship (when action = add | replace)
        - $ref: 'https://api.swaggerhub.com/domains/amdocs-development/CommerceCommonDefinitions/1.1#/parameters/query-excludePrices-default-true''

        **Business rules&#58;**


        **Reference value&#58;**
        - type (Configuration.configuration.reproductRelationship.type)
        - action (Configuration.configuration.relatedParty.validManageProductRelationshipActions)
      operationId: manageProductRelationship
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: array
        items:
          type: string
          minLength: 1
        collectionFormat: multi
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: type
        in: query
        description: |
          Product relation type
        required: false
        type: string
      - name: subtype
        in: query
        description: "Subtype of the relation. \n"
        required: false
        type: string
      - name: context
        in: query
        description: |
          The context with which the commecrial relation  is associated.
          The supported mutually exclusive context values are
          - cartItem.id
          - product.id
          Usage example 'context=(cartItem\.id==\w+ | product==\w+)'
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: productRelationship
        description: |
          The associated related party to the cart item. This parameter is required when the query action is "add" or "replace".
        required: false
        schema:
          $ref: '#/definitions/ProductRelationship'
      responses:
        "200":
          description: |
            *OK* - The product relationship was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageProductRealtionship
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /cartItem/draft:
    post:
      tags:
      - cartItem
      summary: (Internal) Draft an cart item
      description: |
        This service drafts a cart item that represents either modifications to a customer-owned, product or a product offering to be provided.
         <p>In case of modification is on a customer-owned product:
         <ul>
          <li>The <i>rootProductId</i> parameter is <b>mandatory</b>.</li>
          <li>The <i>product.id</i> represents the customer-owned product identifier.</li>
          <li>The supported actions are &#58; add/remove promotions, change.</li>
          <li>The change might involve the add/update/remove characteristics.
            A removed characteristic does not have its value provided.</li>
         </ul>
         <p>In case of a product offering to be provided:
         <ul>
          <li>The <i>productOffering.id</i> represents the product offering to be provided.</li>
          <li>The supported action is &#58; add.</li>
          <li>The default configuration of the product offering is used.</li>
         </ul>
      operationId: draftCartItem
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: rootProductId
        in: query
        description: |
          The root ID of the customer-owned product.
        required: false
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - in: body
        name: cartItem
        description: |
          This represents the modifications to the customer-owned product or the product offering to be provided.
        required: true
        schema:
          minLength: 1
          type: array
          items:
            $ref: '#/definitions/CartItem'
      responses:
        "200":
          description: |
            *succeeded* - The cart item was drafted successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/CartItem'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/applyAutoCorrection:
    post:
      tags:
      - shoppingCart
      summary: Auto correct a shopping cart
      description: |
        This operation auto corrects the shopping cart entity as a result of promotion updates (new | updated | expired).<p>The supported corrections are&#58;<li Additional cart item representing a promotion update on an owned product.
      operationId: shoppingCartAutoCorrection
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      responses:
        "200":
          description: |
            *OK* - The shopping cart was retrieved successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/commitFromNonPersist:
    post:
      tags:
      - shoppingCart
      summary: (Internal) Commit non persistent change
      description: This operation commits a (cached) non-persistent change to the shopping cart entity.
      operationId: commitNonPersistentChange
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: nonPersistentIdentifier
        in: header
        description: |
          Unique identifier of the non-persistent change in the cache
        required: false
        type: string
      responses:
        "200":
          description: '*OK* - The shopping cart entity was updated successfully.'
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/calculatePrice:
    post:
      tags:
      - shoppingCartPrice
      summary: (Internal) Calculate price of a shopping cart
      description: |
        This task calculates the price of the shopping cart.
      operationId: calculatePrice
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - in: body
        name: priceShoppingCart
        description: |
          The is the price of the shopping cart.
        required: true
        schema:
          $ref: '#/definitions/PriceShoppingCart'
      responses:
        "200":
          description: |
            *Success* - The shopping cart price was calculated successfully.
          schema:
            $ref: '#/definitions/PriceShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-price-service
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/qualifyPotentialPromotion:
    post:
      tags:
      - shoppingCartPrice
      summary: List qualified potential promotions
      description: |
        This API returns a list that qualifies potential promotions for shopping cart entity.
        **Business rules&#58;**
        - potentialQualificationItem (if set, the list is limited to the qualified potential promotions for the speficied cart item/s)
      operationId: qualifyPotentialPromotion
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - in: body
        name: shoppingCartPotentialPromotionQualification
        description: |
          The cart items and the reference to the shopping cart.
        required: true
        schema:
          $ref: '#/definitions/ShoppingCartPotentialPromotionQualification'
      responses:
        "200":
          description: |
            *OK* - The promotion qualification process was successful.
          schema:
            $ref: '#/definitions/ShoppingCartPotentialPromotionQualification'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "405":
          description: |
            *Method Not Allowed* - The server rejected the request because the HTTP method used by the resource is not supported by that resource.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-price-service
        public-roles:
        - D1_ShoppingCart_retrieve
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
      x-dox-Microservice: ShoppingCartPriceMS
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/cartPriceInstallmentOption:
    get:
      tags:
      - shoppingCartPrice
      summary: List installment options
      description: |
        This operation lists installment options for an cart item price.<p>
        **Business rules&#58;**
        - installment option applicable only for cartPrice.priceType = OC
        - customerId (if not provided, anonymous is assumed)

        **Reference value&#58;**
        - OC (Configuration&#58; validValues.priceType.oc)
      operationId: getCartPriceInstallmentOption
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the product cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: nestedPriceCartItemId
        in: query
        description: |
          The ID of the nested cart item.
        required: false
        type: string
      - name: cartPriceId
        in: query
        description: |
          The IDs of the relevant cart price.
          If it is not provided, all the cart prices are assumed to be relevant.
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      responses:
        "200":
          description: |
            *OK* - The Installment Options were retrieved successfully.
          schema:
            type: array
            items:
              $ref: '#/definitions/CartPriceInstallmentOption'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-price-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/checkout:
    post:
      tags:
      - checkout
      summary: Checkout of the shopping cart
      description: |
        This API creates a new product order from the input cart items. It first validates the cart. If the validation fails, then the product order is not created and a validation failure messages is returned. If validation passes, then a product order is created, and a product order ID is returned. If in the body the cart items are defined, checkout is performed only on those items, if only cart id is transferred the checkout is performed on the whole cart. If product order is part of the input in the checkout, the checkout items are added to the existing order.
      operationId: checkout
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: productOrderId
        in: query
        description: |
          Unique identifier of the product order
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: checkoutCartItem
        description: |
          Checkedout item list - for Partial Checkout
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: |
            *OK* - The checkout was successfully completed.
          schema:
            $ref: '#/definitions/CheckoutShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-checkout-service
        public-roles:
        - D1_ShoppingCart_checkout
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/replaceProductOffering:
    post:
      tags:
      - productModification
      summary: Replace the product offering of an owned product
      description: |
        This service handles replacing the product offering of a customer-owned product.
        The following use cases are supported, based on the provided input parameters.&#58;
        <b><u>Replace the product offering of a customer-owned product &#45;</u></b>
        In this use case, the identifier of the customer-owned product is provided as the query parameter.
        Two (top-most) cart items are created, where one represents the existing configuration
          of the customer-owned product, and the other represents the configuration of the selected
          product offering, with which the customer-owned product is about to be replaced.
        The created cart items are added to the existing shopping cart, if its identifier is specified
          in the request body. Otherwise, a new shopping cart is created.
        <b><u>Replace the product offering of a customer-owned product that is represented by an cart item &#45;</u></b>
        In this use case, the identifier of the cart item, which represents a customer-owned product, is provided in the request body.
        An additional cart item is created, which represents the configuration of the selected product offering, with which the customer-owned product is about to be replaced.
        - **Business rules&#58;**
          The created cart items are added to the same shopping cart.
          The <i>ModifyShoppingCart.modifyCartItem </i> array is limited to a single entry.
          The <i>ModifyCartItem.id</i> and the productId query parameter are mutually exclusive.
          The <i>ModifyCartItem.modifyReason</i> (if set) is used for both cart items.
      operationId: replaceProductOffering
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: productOfferingId
        in: query
        description: |
          Unique identifier of the product offering for the replacement offer. This is the ID of the catalog product offering.
        required: true
        type: string
      - name: productId
        in: query
        description: |
          Unique identifier of the customer-owned product. This is the product inventory ID of the customer-owned product.
        required: false
        type: string
      - in: body
        name: replaceOffer
        description: |
          This is the replace offer request.
        required: true
        schema:
          $ref: '#/definitions/ModifyShoppingCart'
      responses:
        "201":
          description: |
            *Created* - The cart item was created successfully.
          schema:
            $ref: '#/definitions/ShoppingCartRef'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      deprecated: true
      x-amdocs:
        route-service: shoppingcart-modify-service
        public-roles:
        - D1_ShoppingCart_update
        - D1_ShoppingCart_create
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/replaceProductOfferingInGroup:
    post:
      tags:
      - productModification
      summary: (Internal) Replace the product offering of an owned product (within a group)
      description: "This service handles replacing the product offering of a customer-owned product with another product offering sharing the same group option.\nThe following use cases are supported, based on the provided input parameters.\n <b><u>Replace the product offering of a customer-owned product &#45;</u></b>\n In this use case, the identifier of the customer-owned product is provided as the query parameter.\n\n  One (top-most) cart items are created, where one descendant cart item represents the existing configuration of the customer-owned product, and another descendant cart item\n  represents the configuration of the selected product offering, with which the customer-owned product is about to be replaced. Both descendant cart items share the same parent\n  cart item and ProductOfferingGroupOption.\n\n  The created cart item is added to an existing shopping cart, if its identifier is specified in the request body. Otherwise, a new shopping cart is created.\n<b><u> Replace the product offering of a customer-owned product that is represented by a cart item&#45;</u></b>\n In this use case, the identifier of the cart item which represents\na customer-owned product is provided in the request body. \n A descendant additional cart item, which represents the configuration of the selected product offering, with which the customer-owned product is about to be replaced,\n  is created next to the cart item that represents the customer-owned product.\n   The <i> ModifyShoppingCart.modifyCartItem </i> array is limited to a single entry.\n   The <i>ModifyShoppingCart.id </i>and the productId query parameter are mutually exclusive.\n   The <i>ModifyShoppingCart.modifyReason</i> (if set) is used for both cart items.\n"
      operationId: replaceProductOfferingInGroup
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: productOfferingId
        in: query
        description: |
          Unique identifier of the product offering for the replacement offer. This is the ID of the catalog product offering.
        required: true
        type: string
      - name: productId
        in: query
        description: |
          Unique identifier of the customer-owned product. This is the product inventory ID of the customer-owned product.
        required: false
        type: string
      - in: body
        name: replaceOffer
        description: |
          The request of the replace offer.
        required: true
        schema:
          $ref: '#/definitions/ModifyShoppingCart'
      responses:
        "201":
          description: |
            *Created* - The cart item was created successfully.
          schema:
            $ref: '#/definitions/ShoppingCartRef'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      deprecated: true
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-modify-service
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/managePhoneNumberProduct:
    post:
      tags:
      - cartItem
      summary: Manage the phone number of a product
      description: "This service updates the phone number on the cart item that is provided.\n**Mandatory&#58;**\n - portedNumber(when isPortIn = True)\n - phoneNumber(when isPortIn = False)\n \n**Business rules&#58;**\n- shopping cart state is draft\n- validation agains external system will be performed(when isPortIn = True)\n"
      operationId: managePhoneNumberProduct
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item
        required: true
        type: string
      - in: body
        name: managePhoneNumberProduct
        description: |
          The phone number of the product that is validated in case of port-in and updated
        required: true
        schema:
          $ref: '#/definitions/PhoneNumberProduct'
      responses:
        "200":
          description: |
            *succeeded* - Port-in product cart item was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCartRef'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-modify-service
        public-roles:
        - D1_ShoppingCart_managePhoneNumberProduct
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/manageNote:
    post:
      tags:
      - cartItem
      summary: Manage the note association with cart item
      description: |
        This operation manages the association of cart item entity with a place. NOT IMPLEMENTED YET

        **Mandatory&#58;**
        - *nestedCartItemId* (when the associated cart item is not top-most)
        - *noteId* (when action = replace | remove)
        - *Note.noteType* (when action = add | replace)

        **Business rules&#58;**
        - *Note.noteType* is valid

        **Reference values&#58;**
        - *noteType* (*Configuration: configuration.note.cartItem.validNoteTypes*)
        - *action* (*Configuration: configuration.note.cartItem.validManageNoteActions*)
      operationId: manageCartItemNote
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: string
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: noteId
        in: query
        description: |
          Unique identifier of the note
        required: false
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: Note
        description: |
          The note associated with the cart item.
        required: false
        schema:
          $ref: '#/definitions/Note'
      responses:
        "200":
          description: |
            *OK* - The association of the place with the cart item was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageProductRealtionship
        private-roles:
        - D1_ShoppingCart_manageNote
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/validate:
    post:
      tags:
      - shoppingCartValidate
      summary: Validate the shopping cart
      description: |
        This operation performs business validations on the shopping cart entity. The validations performed are dependent on the *stage* and *validationType* parameters.
      operationId: validate
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: validationType
        in: query
        description: |
          The type of validations to be performed. This parameter is optional. It can include a list of validation types
          (one or multiple separated by comma) - configuration, customer validity, shopping cart, and port in.
        required: false
        type: string
      - name: stage
        in: query
        description: |
          Validation stage, in terms of the shopping cart lifecycle (for example: *cartValidation*, *cartCheckout*, and so on).
          This value defines the default validations to be performed, if none were set.
          This value is passed to other systems down the stream, which might use it to refine the executed validation rules, and so on.
        required: false
        type: string
      responses:
        "200":
          description: |
            *OK* - The shopping cart was validated successfully.
          schema:
            $ref: '#/definitions/Validation'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-validate-service
        public-roles:
        - D1_ShoppingCart_validate
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
  /shoppingCart/validate:
    post:
      tags:
      - shoppingCartValidate
      summary: (Internal) Validate non persisted shopping cart
      description: |
        This operation performs business validations on the non-persisted shopping cart entity. The validations performed are dependent on the stage and validationType parameters.<p>
        **Mandatory&#58;**
        - cartItem.productOffering
        - product.id (unless cartItem represents a provide action)

        **Readonly&#58;**
        - ShoppingCart

        **Business rules&#58;**
        - modifyReason (reason must match cartItem.action)
      operationId: validateNonPersistedShoppingCart
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: validationType
        in: query
        description: |
          The type of validations to be performed. This parameter is optional. It can include a list of validation types
          (one or multiple separated by comma) - configuration, customer validity, shopping cart, and port in.
        required: false
        type: string
      - name: stage
        in: query
        description: |
          Validation stage, in terms of the shopping cart lifecycle (for example: *cartValidation*, *cartCheckout*, and so on).
          This value defines the default validations to be performed, if none were set.
          This value is passed to other systems down the stream, which might use it to refine the executed validation rules, and so on.
        required: false
        type: string
      - in: body
        name: ShoppingCart
        description: |
          The shopping cart with one or more shopping cart items.
        required: true
        schema:
          $ref: '#/definitions/ShoppingCart'
      responses:
        "200":
          description: |
            *Validated* - The validation was performed successfully.
          schema:
            $ref: '#/definitions/Validation'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        "502":
          description: |
            *Bad Gateway* - The server encountered an unexpected condition when calling another service.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-InternalAPI: true
      x-amdocs:
        route-service: shoppingcart-validate-service
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/note:
    get:
      tags:
      - note
      summary: Retrieve a list of cart item notes
      description: |
        This operation retrieves a list of notes associated with a cart item entity. NOT IMPLEMENTED YET

        **Mandatory&#58;**
        - *nestedCartItemId* (when the associated cart item is not top-most)

        **Business rules&#58;**
        - *filters.noteType* is valid

        **Reference values&#58;**
        - *noteType* (*Configuration: configuration.note.cartItem.validNoteTypes*)
      operationId: getCartItemNote
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: string
      - name: filters
        in: query
        description: |
          Limit the returned entities only to those that match the specified values.
          The supported values are:
           - *noteType*
           - *date*

          <i>Example&#58; filters=noteType==technical&date>=2017-07-21T00:00:00Z</i>
        required: false
        type: string
      - name: limit
        in: query
        description: |
          Requested number of resources to be provided in the response requested by the client
        required: false
        type: integer
      - name: offset
        in: query
        description: "Requested index for start of page to be provided in the response requested by the client \n"
        required: false
        type: integer
      responses:
        "200":
          description: |
            *OK* - The notes associated with order item were retrieved successfully.
          headers:
            X-Total-Count:
              type: integer
              description: The total number of items matching criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_retrieveNote
        private-roles:
        - D1P_ShoppingCart_read
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/manageRequestedDate:
    post:
      tags:
      - shoppingCart
      summary: Manage the requested date
      description: "This operation manages the requested dates of the cart entity.<p>The supported entities that the requested date can be managed for are&#58; shopping cart | cart item. \n  The names of the updatable attributes are configurable.\n  \n**Mandatory&#58;**\n- *id* (when managing nested cart item)\n- *action* (when managing product cart requested date)\n- *date* (when managing product cart requested date, and action = add | replace)\n- *cartItemRequestedDate.id* (when managing cart item)\n- *cartItemRequestedDate.action* (when managing cart item)\n- *cartItemRequestedDate.date* (when managing cart item, and action = add | replace)\n\n**Reference value&#58;**\n- *action* (*Configuration&#58; configuration.shoppingCartValidation.manageRequestedDateActions*)\n- *date.name* (*Configuration&#58; configuration.ShoppingCartValidation.validManageRequestedDateNames*)\n"
      operationId: manageRequestedDate
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          The locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n"
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: managedDates
        description: |
          The date that is assigned to the shopping cart and the cart item.
        required: true
        schema:
          $ref: '#/definitions/ManageRequestedDate'
      responses:
        "200":
          description: |
            *OK* - The cart dates were updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_update
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/manageContactMedium:
    post:
      tags:
      - shoppingCart
      summary: Manage the contact medium association
      description: |
        This operation manages the association of the shopping cart entity to a contact medium.<p>
        **Mandatory&#58;**
        - type (when action = replace | remove | add )
        - mediumCharacteristic.emailAddress is type is emailAddress (when action = add | replace)
        - mediumCharacteristic.phoneNumber is type is phoneNumber (when action = add | replace)

        **Business rules&#58;**
        - only one mediumCharacteristic that define in the contactType should be populated in the input

        **Reference value&#58;**
        - type (Configuration.configuration.contactMediumType)
        - action (Configuration.configuration.relatedParty.validManageContactMediumActions)
      operationId: manageContactMedium
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: Amdocs-Client-Id
        in: header
        description: |
          .
        required: false
        type: string
      - name: contactMediumType
        in: query
        description: |
          Contact Meduim type, parameter that identify the cart.
        required: false
        type: string
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: ContactMediumCharacteristic
        description: |
          The related party associated to the shopping cart. This parameter is required when the query action is "add" or "replace".
        required: false
        schema:
          $ref: '#/definitions/MediumCharacteristic'
      responses:
        "200":
          description: |
            *OK* - The related party was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageContactMedium
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
  /shoppingCart/{shoppingCartId}/cartItem/{cartItemId}/manageNextAction:
    post:
      tags:
      - cartItem
      summary: (beta)Manage the next action of the cart item (for example next action of the suspend is resume)
      description: |
        This operation manages the next action definion .

        **Mandatory&#58;**
        - *nestedCaItemId* (when the associated cart item is not top-most)

        **Reference values&#58;**
        - *action* (*Configuration&#58; configuration.nextactionmanagement.validActions*)
      operationId: manageActionPolicy
      consumes:
      - application/json;charset=utf-8
      produces:
      - application/json;charset=utf-8
      parameters:
      - name: shoppingCartId
        in: path
        description: |
          The ID of the shopping cart.
        required: true
        type: string
      - name: cartItemId
        in: path
        description: |
          The ID of the cart item.
        required: true
        type: string
      - name: Accept-Language
        in: header
        description: |
          Locale of the client
        required: false
        type: string
      - name: If-Match
        in: header
        description: "*If-Match* HTTP request header makes the request conditional. \n- For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \n- For PUT and other non-safe methods, the server will only upload the resource.\n"
        required: true
        type: string
      - name: nestedCartItemId
        in: query
        description: |
          The ID of the nested cart item
        required: false
        type: array
        items:
          type: string
          minLength: 1
        collectionFormat: multi
      - name: action
        in: query
        description: |
          The action to be performed: add, replace, or remove
        required: true
        type: string
      - name: fields
        in: query
        description: |
          This parameter specifies the fields to be retrieved in response to a request from the client&#58;
          The list of resource attributes must be comma-separated.
          Nested resource attributes can be specified using the dot notation, as follows&#58;
          [parentresource].[childresource].[attributeName]
          A subselector can be specified to request a subset of nested resource attributes for arrays or objects, as follows&#58;
          [resource]([attributeName], …, [attributeName])
          A wildcard can be specified to request all attributes of nested resources, as follows&#58;
          [resource]/*If fields is specified with reserved value “all”, then all fields MUST be returned.
        required: false
        type: array
        items:
          type: string
          minLength: 0
        collectionFormat: multi
        default: none
      - name: excludePrices
        in: query
        description: "Indicates if the operation should involve with price recalculation and/include prices in the response. \nSet to 'false' to recalculate prices and return them in the response. \n"
        required: false
        type: boolean
        default: true
      - in: body
        name: NextAction
        description: |
          The next action for the cart item.
        required: false
        schema:
          $ref: '#/definitions/NextAction'
      responses:
        "200":
          description: |
            *OK* - The association of the note with the cart item was updated successfully.
          schema:
            $ref: '#/definitions/ShoppingCart'
        "400":
          description: |
            *Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: |
            *Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid web resource, and so on.
          schema:
            $ref: '#/definitions/Error'
        "409":
          description: |
            *Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.
          schema:
            $ref: '#/definitions/Error'
        "422":
          description: |
            *Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
          schema:
            $ref: '#/definitions/ValidationError'
        "500":
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: |
            *Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.
          schema:
            $ref: '#/definitions/Error'
      x-dox-Microservice: shoppingcart-shoppingcart-app-id
      x-amdocs:
        route-service: shoppingcart-shoppingcart-service
        public-roles:
        - D1_ShoppingCart_manageNextAction
        private-roles:
        - D1P_ShoppingCart_write
        - FndP_APIGateway_gw
definitions:
  ShoppingCart:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the shopping cart
        readOnly: true
      href:
        type: string
        description: |
          Hyperlink to access the shopping cart
        readOnly: true
      validFor:
        description: The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)
        $ref: '#/definitions/TimePeriod'
      contactMedium:
        type: array
        description: |
          The related party that defines the party associated with the cart
        items:
          $ref: '#/definitions/ContactMedium'
      relatedParty:
        type: array
        description: |
          The related party that defines the party associated with the cart
        items:
          $ref: '#/definitions/RelatedPartyRef'
      cartItem:
        type: array
        description: |
          The list of the active cart items in the shopping cart
        items:
          $ref: '#/definitions/CartItem'
      cartTotalPrice:
        type: array
        description: |
          The amount of the cart, usually money, that represents the price to be paid
        readOnly: true
        items:
          $ref: '#/definitions/CartPrice'
      validation:
        $ref: '#/definitions/Validation'
      immediatePromotion:
        type: array
        description: |
          The reference to the immediate promotions and their details
        readOnly: true
        items:
          $ref: '#/definitions/ImmediatePromotion'
      '@type':
        type: string
        description: Generic attribute containing the name of the resource class type
        x-dox-NotImplemented: true
      externalIdentifier:
        type: array
        description: |
          The list of external identifiers related to the shopping cart
        items:
          $ref: '#/definitions/ExternalIdentifier'
      creationDate:
        type: string
        format: date-time
        description: The date on which the shopping cart was created
      channel:
        type: array
        description: |
          List of channels in the product order
        items:
          $ref: '#/definitions/ChannelRef'
      lastUpdate:
        type: string
        format: date-time
        description: The date on which the shoping cart was last updated
      externalId:
        type: string
        description: |
          External ID of the shopping cart. This parameter is usually provided by a consumer to identify the shopping cart in the consumer system.
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ShoppingCartExtensions
    description: |
      Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions
  TimePeriod:
    type: object
    properties:
      startDateTime:
        type: string
        format: date-time
        description: |
          Start date and time of the period
      endDateTime:
        type: string
        format: date-time
        description: |
          End date and time of the period
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: TimePeriodExtensions
        x-dox-NotImplemented: true
    description: |
      Time period
  ContactMedium:
    type: object
    properties:
      preferred:
        type: boolean
        description: If true, indicates that is the preferred contact medium
      type:
        type: string
        description: |
          The contact medium type, such as email address, telephone number, or postal address
      validFor:
        description: The time period that the contact medium is valid for
        $ref: '#/definitions/TimePeriod'
      characteristic:
        $ref: '#/definitions/MediumCharacteristic'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ContactMediumExtensions
    description: |
      Indicates the contact medium that could be used to contact the party
  MediumCharacteristic:
    type: object
    properties:
      type:
        type: string
        description: |
          The type of the medium (fax, mobile phone, and so on)
      emailAddress:
        type: string
        description: |
          For the email type of the medium, the contact email address
      phoneNumber:
        type: string
        description: |
          For the telephone number type of the medium, the contact phone number
      city:
        type: string
        description: |
          For the postal address type of the medium, the city name for the contact address
      country:
        type: string
        description: |
          For the postal address type of the medium, the country ISO code for the contact address
      postCode:
        type: string
        description: |
          For the postal address type of the medium, the postal code of the contact address
      stateOrProvince:
        type: string
        description: |
          For the postal address type of the medium, the state or province of the contact address
      street1:
        type: string
        description: |
          For the postal address type of the medium, the first street line for the contact address
      street2:
        type: string
        description: |
          For the postal address type of the medium, the second street line for the contact address
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: MediumCharacteristicExtensions
    description: |
      The information of the medium by which the cart can be retrieved for anonymous customers (for example, email address, telephone number, and so on)
  RelatedPartyRef:
    type: object
    properties:
      id:
        type: string
        description: |
          Unique identifier of the related party
      href:
        type: string
        description: |
          Hypertext reference to the related party, could be a party reference or a party role reference
      name:
        type: string
        description: |
          Name of the related party
      role:
        type: string
        description: |
          Role played by the related party
      '@referredType':
        type: string
        description: |
          Name of the type of the referred resource entity
      lastName:
        type: string
        description: |
          Last name of the related party
      firstName:
        type: string
        description: |
          First name of the related party
      phoneNumber:
        type: string
        description: |
          Phone number of the related party
      emailAddress:
        type: string
        description: |
          emailAddress of the related party
      segment:
        type: string
        description: |
          segment of the related party
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: RelatedPartyRefExtensions
        x-dox-NotImplemented: true
    description: |
      Party or party role that is linked to a specific entity
  CartItem:
    type: object
    properties:
      '@type':
        type: string
        description: Generic attribute containing the name of the resource class type
        x-dox-NotImplemented: true
      id:
        type: string
        description: |
          The ID of cart item
        readOnly: true
      action:
        type: string
        description: |
          The action performed on item: add, remove, or change
      status:
        type: string
        description: |
          The current status of the cart item (for example, active or saved for later)
        readOnly: true
      quantity:
        type: integer
        description: |
          The quantity of the item
      readOnly:
        type: boolean
        description: |
          Indicates whether or not the cart item can be reconfigured
      creationDate:
        type: string
        format: date-time
        description: "The item creation date  \n"
      itemPrice:
        type: array
        description: |
          The amount of the cart item, usually money, that represents the price to be paid
        readOnly: true
        items:
          $ref: '#/definitions/CartPrice'
      itemTotalPrice:
        type: array
        description: |
          The amount of the cart item total prices, usually money, that represents the price to be paid
        readOnly: true
        items:
          $ref: '#/definitions/CartPrice'
      stock:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/StockItem'
      requestedCompletionDate:
        type: string
        format: date-time
        description: |
          Date on which the cart item was requested to be completed
      cartItemRelationship:
        type: array
        description: |
          The relationship between the cart items
        items:
          $ref: '#/definitions/CartItemRelationship'
      productOffering:
        $ref: '#/definitions/ProductOfferingRef'
      productOfferingGroupOption:
        $ref: '#/definitions/ProductOfferingGroupOption'
      product:
        $ref: '#/definitions/Product'
      cartItem:
        type: array
        description: |
          The cart items
        items:
          $ref: '#/definitions/CartItem'
      itemTerm:
        type: array
        description: |
          The commitment term of the cart item
        items:
          $ref: '#/definitions/CartTerm'
      nextAction:
        type: array
        items:
          $ref: '#/definitions/NextAction'
      modifyReason:
        type: array
        description: |
          The reason for the cart item modification
        items:
          $ref: '#/definitions/ModifyReason'
      metadata:
        type: array
        description: |
          The channel characteristic for the cart item
        items:
          $ref: '#/definitions/Metadata'
      relatedImmediatePromotion:
        type: array
        description: |
          The reference to the immediate promotion entity
        readOnly: true
        items:
          $ref: '#/definitions/RelatedImmediatePromotion'
      characteristic:
        type: array
        description: |
          The characteristics of the product offering
        items:
          $ref: '#/definitions/ProductCharacteristic'
      externalIdentifier:
        type: array
        description: |
          The list of external identifiers related to the cart item
        items:
          $ref: '#/definitions/ExternalIdentifier'
      productOrderRef:
        type: array
        items:
          $ref: '#/definitions/ProductOrderRef'
      note:
        type: array
        description: |
          Extra information about the cart item
        items:
          $ref: '#/definitions/Note'
      externalId:
        description: |
          External ID of the cart item. This parameter is usually provided by a consumer to identify the cart item in the consumer system.
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CartItemExtensions
    description: |
      An identified part of the shopping cart. A shopping cart is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options
  CartPrice:
    type: object
    properties:
      '@type':
        type: string
        description: Generic attribute containing the name of the resource class type
      id:
        type: string
        description: |
          The ID of the cart item price
      name:
        type: string
        description: |
          The short descriptive name, such as subscription price
      description:
        type: string
        description: |
          The narrative that explains in detail the semantics of this entity (cart/cart item) price
      priceType:
        type: string
        description: |
          The category that describes the price charged for a cart/cart item
      unitOfMeasure:
        type: string
        description: |
          The unit of measurement applicable for the price type allowance, for example, GB, minutes, and so on.
      recurringChargePeriod:
        type: string
        description: |
          The period to which to repeat the application of the recurring price (either 'days', 'weeks', 'months', or 'years'). This property is populated only if the price type is 'recurring'
      recurringChargePeriodLength:
        type: integer
        description: |
          The period length of the recurring charge.
      price:
        $ref: '#/definitions/Price'
      finalPrice:
        $ref: '#/definitions/Price'
      standalonePrice:
        $ref: '#/definitions/Price'
      priceAlteration:
        type: array
        description: |
          The record of the price alteration
        items:
          $ref: '#/definitions/PriceAlteration'
      installmentOption:
        $ref: '#/definitions/InstallmentOption'
      cartPriceRelationship:
        $ref: '#/definitions/CartPriceRelationship'
      immediatePayOption:
        $ref: '#/definitions/ImmediatePayOption'
      taxIncluded:
        type: string
        description: Indicates if the price is defined in the catalog one as tax included or as tax excluded. Valid Values - Excluded, Included
      priceOverrideOption:
        $ref: '#/definitions/PriceOverrideOption'
      role:
        type: string
        description: |
          The role of the price, for example, price, bundle price alteration, and so on
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CartPriceExtensions
        x-dox-NotImplemented: true
    description: |
      Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only 'Active' cart items)
  Price:
    type: object
    properties:
      taxIncludedAmount:
        $ref: '#/definitions/Money'
      dutyFreeAmount:
        $ref: '#/definitions/Money'
      taxAmount:
        $ref: '#/definitions/Money'
      taxRate:
        type: number
        format: float
      percentage:
        type: number
        format: float
      priceReduction:
        $ref: '#/definitions/Money'
      priceOverride:
        $ref: '#/definitions/Money'
      priceRecordId:
        type: string
        description: |
          The unique identifier of the price in the pricing domain.
      impactingPriceParameter:
        type: array
        description: |
          The parameters that impact the price
        items:
          $ref: '#/definitions/PriceParam'
      appliedTax:
        type: array
        items:
          $ref: '#/definitions/AppliedTax'
      rateValidity:
        $ref: '#/definitions/TimePeriod'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceExtensions
        x-dox-NotImplemented: true
    description: |
      The price of current catalog item. It is set to null if the price record is
      missing or if there is any exception.
  Money:
    type: object
    properties:
      unit:
        type: string
        description: |
          The currency of the price
      value:
        type: number
        description: |
          The amount of the price
    description: |
      The price and currency of the catalog item
  PriceParam:
    type: object
    properties:
      type:
        type: string
        description: |
          The type of the parameter
      name:
        type: string
        description: |
          The name of the parameter
      value:
        type: string
        description: |
          The value of the parameter
    description: |
      The parameters that may impact/impact the price
  AppliedTax:
    type: object
    required:
    - taxAmount
    - taxDefinition
    - taxableAmount
    properties:
      taxDefinition:
        $ref: '#/definitions/TaxDefinition'
      taxAmount:
        $ref: '#/definitions/Money'
      taxableAmount:
        $ref: '#/definitions/Money'
      exemptAmount:
        $ref: '#/definitions/Money'
      periodCoverage:
        $ref: '#/definitions/TimePeriod'
      characteristic:
        type: array
        items:
          $ref: '#/definitions/Characteristic'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: AppliedTaxExtensions
        x-dox-NotImplemented: true
    description: Calculated tax response
  TaxDefinition:
    type: object
    required:
    - exemptionType
    - isExemption
    - taxJurisdiction
    - taxRate
    - taxType
    - vaidFor
    properties:
      name:
        type: string
        description: The display name of tax type
      taxRate:
        type: number
        format: float
        description: Rate of tax
      taxType:
        type: string
        description: VAT/GST etc
      category:
        type: string
        description: Luxury/Standard etc
      isExemption:
        type: boolean
        description: Where the tax definition has exemption defined on it
      exemptionType:
        type: string
        description: Exemption type. Valid Values - Customer, Service, Jurisdiction, None.
      vaidFor:
        $ref: '#/definitions/TimePeriod'
      taxJurisdiction:
        $ref: '#/definitions/TaxJurisdiction'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: TaxDefinitionExtensions
        x-dox-NotImplemented: true
    description: Tax definition
  TaxJurisdiction:
    type: object
    required:
    - level
    - name
    properties:
      name:
        type: string
      level:
        type: string
      id:
        type: string
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: TaxJurisdictionExtensions
        x-dox-NotImplemented: true
  Characteristic:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
      valueType:
        type: string
        description: |
          Value type of the characteristic
        x-dox-NotImplemented: true
  PriceAlteration:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the price, for example, Subscription Price
      description:
        type: string
        description: "Detailed description of the price of the entity \n"
      unitOfMeasure:
        type: string
        description: |
          Unit of measurement of the price. This property is populated if the price type is allowance, such as gigabytes, minutes, and so on.
      recurringChargePeriod:
        type: string
        description: |
          Recurring charge period. This property is populated if the price type is Recurring.
      recurringChargePeriodLength:
        type: integer
        description: |
          The period length of the recurring charge
      priceType:
        type: string
        description: |
          Category of the price, for example, allowance, recurring, and so on
      applicationDuration:
        type: integer
        description: |
          Duration of the price
      priority:
        type: integer
        description: |
          Priority of the price
      alterationType:
        type: string
        description: |
          Type of the alteration
      promotionActionId:
        type: string
        description: |
          Unique identifier of the promotion action triggering this price alteration
      immediatePromotionId:
        type: string
        description: |
          Unique identifier of the promotion instance
      alterationProductOfferingPriceId:
        type: string
        description: |
          Unique identifier of the product offering price on behalf of which the price alteration was given
      alterationBundleProductOfferingId:
        type: string
        description: |
          Unique identifier of the bundle product offering on behalf of which the price alteration was given
      alterationApplyOrder:
        type: integer
        description: |
          Order of the alteration price appliance
      '@type':
        type: string
        description: |
          Type of the resource
        x-dox-NotImplemented: true
      chargeType:
        type: string
        description: "Charge type represented by the price alteration. The supported values are&#58;<ul><li>debit<li>discount<li>credit</ul> \n"
      price:
        $ref: '#/definitions/Price'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: PriceAlterationExtensions
        x-dox-NotImplemented: true
    description: |
      An amount, usually of money, that modifies the price charged for an  item
  InstallmentOption:
    type: object
    properties:
      id:
        type: string
        description: |
          The identifier of the installment option
      installmentOption:
        type: string
        description: |
          Indicates if installment options are optional / mandatory for the price
        readOnly: true
      numberOfInstallments:
        type: integer
        description: |
          The number of installments
      downPayment:
        $ref: '#/definitions/PaymentAmount'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: InstallmentOptionExtensions
        x-dox-NotImplemented: true
    description: |
      Represents an installment option for an  price
  PaymentAmount:
    type: object
    properties:
      amount:
        $ref: '#/definitions/Money'
      percentage:
        type: number
        format: float
        description: |
          Represents the percentage that the amount represents out of the price
      taxIncludedAmount:
        $ref: '#/definitions/Money'
      dutyFreeAmount:
        $ref: '#/definitions/Money'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PaymentAmountExtensions
        x-dox-NotImplemented: true
    description: |
      Represents a payment amount
  CartPriceRelationship:
    type: object
    required:
    - id
    - type
    properties:
      id:
        type: string
        description: |
          The identifier of the related CartPrice entity
      type:
        type: string
        description: |
          The relationship type
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CartPriceRelationshipExtensions
        x-dox-NotImplemented: true
    description: |
      The relationship between CartPrice entities
  ImmediatePayOption:
    type: object
    properties:
      payOption:
        type: string
        description: |
          The immediate pay option:
          <ul>
          <li> *MUST* - The price must be paid immediately
          <li> *MAY* - The price might be paid immediately
          </ul>
      payAmount:
        $ref: '#/definitions/Money'
      minPayAmount:
        $ref: '#/definitions/Money'
      payImmediately:
        type: boolean
        description: |
          Indicates whether the prcie included in the immediate payment.
          If the pay option is set to MUST, this indication is set to true.
          If the pay option is set to MAY, this indication is set to either true or false based on a customer decission.
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ImmediatePayOptionExtensions
        x-dox-NotImplemented: true
    description: |
      The payment options for the product offering price payment. The payment options can indicate whether the price must or might be paid immediatelly.
      In addition, the payment options include an indication whether the price should be included in the immediate payment or not.
      If the payment option is set to must, this indication is set to true. Otherwise, if the payment option is set to might, the indication is set to either
      true or false based on a customer decission.
  PriceOverrideOption:
    type: object
    properties:
      overrideType:
        type: string
        description: |
          Indicates which override option the CSR can apply. Valid Values : waive, absolute, increase, decrease
      overrideValue:
        description: "The override amount or percent.  \n"
        $ref: '#/definitions/PaymentAmount'
      validFor:
        description: |
          Time validity of the price override
        $ref: '#/definitions/TimePeriod'
      relatedParty:
        description: |
          Party (user) associated with the product order price override
        $ref: '#/definitions/RelatedPartyRef'
      reason:
        description: |
          The Reason of the product order price override
        $ref: '#/definitions/Reason'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceOverrideOptionExtensions
        x-dox-NotImplemented: true
    description: |
      The waive and override data of a price
  Reason:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      reasonText:
        type: string
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ReasonExtensions
        x-dox-NotImplemented: true
    description: "The reason for the action \n"
  StockItem:
    type: object
    properties:
      stockAvailabilityStatus:
        type: string
        description: |
          Stock availability levels for the product, will contain levels as inStock, outOfStock, lowStock and unavailable
      stockAvailabilityQuantity:
        type: integer
        description: |
          The actual number of items in stock for this product
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: StockItemExtensions
        x-dox-NotImplemented: true
    description: |
      This resource is a representation of stock information in the for the product in the stock management system
  CartItemRelationship:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the referenced cart item
      type:
        type: string
        description: |
          The type of relationship with the cart item to which it is related
      externalId:
        type: string
        description: "External ID of the referenced cart item.\nThis value is used if the referenced cart item is not persisted yet (that is, no ID was assigned for it). The *id* attribute, if set, takes precedence over the external ID. \n"
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs: refDefinition:CartItemRelationshipExtensions
        x-dox-NotImplemented: true
    description: |
      The relationship between cart items
  ProductOfferingRef:
    type: object
    properties:
      '@referredType':
        type: string
        description: Generic attribute indicating the name of the class type of the referred resource entity.
        x-dox-NotImplemented: true
      id:
        type: string
        description: |
          The unique ID of the product offering
      name:
        type: string
        description: |
          The name of the product offering
      href:
        type: string
        description: |
          The self-reference to the product offering
      productOfferingType:
        type: string
        description: |
          The type of the product offering
      productOfferingTypeGroup:
        type: string
        description: |
          The type of the product offering group
      productOfferingClassification:
        type: string
        description: |
          The classification of the product offering. Valid values: customerOffer, subscriberMainOffer, subscriberOffer
      version:
        type: string
        description: |
          The version of the product offering
      serialized:
        type: boolean
        description: |
          Indicates whether the product specification is maintained in the order/product inventory (assigned products)
          instance by instance or whether a single product instance can represent a bulk quantity of the product specification.
          Non-serialized products are typically simple hard goods such as phone covers, batteries, earphones, and so on.
      attachment:
        type: array
        items:
          $ref: '#/definitions/Attachment'
      valueRank:
        type: integer
        description: |
          The value rank of the product offering
      primary:
        type: boolean
        description: |
          Indicates whether the product offering has a business significance for the customer
          It has the following implications&#58;
          <ul><li>It is reflected as a product for the customer and it is actionable - the customer can perform actions on it
          <li>An action performed on a primary offer can impact the actions available for its bundled or dependent offers (for example, when ownership of a primary offer is changed some internal offers cannot be added or removed)</ul>
      durationPolicy:
        $ref: '#/definitions/DurationPolicy'
    description: |
      The reference to the product offering
  Attachment:
    properties:
      name:
        type: string
        description: |
          The unique ID of the attachment in the element to which it is related
      type:
        type: string
        description: |
          The attachment type, such as a video or a picture
      description:
        type: string
        description: |
          The narrative text describing the content of the attachment
      url:
        type: string
        description: |
          The uniform resource locator, which is a web page address (a subset of the URI)
      mimeType:
        type: string
        description: |
          The attachment MIME type, such as an extensions file for a video, a picture, or a document
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: AttachmentExtensions
        x-dox-NotImplemented: true
    description: |
      Complements the description of an element (for instance a product), through a video or a pictures
  DurationPolicy:
    type: object
    properties:
      duration:
        $ref: '#/definitions/Quantity'
      startDatePolicy:
        type: string
        description: |
          Start date of the policy, from which the duration is calculated
      endDatePolicy:
        type: string
        description: |
          End date of the policy, until which the duration is calculated
      effectiveFor:
        $ref: '#/definitions/TimePeriod'
      terminationPolicy:
        type: string
        description: |
          Defines the termination policy upon duration end date
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: DurationPolicyExtensions
        x-dox-NotImplemented: true
    description: |
      Policy for calculting a limited duration for any entity
  Quantity:
    type: object
    properties:
      units:
        type: string
        description: |
          Units that are associated with the quantity
      amount:
        type: number
        description: |
          Amount that is associated with the quantity
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: QuantityExtensions
        x-dox-NotImplemented: true
    description: |
      Quantity of a resource
  ProductOfferingGroupOption:
    type: object
    properties:
      groupOptionId:
        type: string
        description: |
          The ID of the product offering group option
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ProductOfferingGroupOptionExtensions
        x-dox-NotImplemented: true
    description: |
      The group option of the product offering
  Product:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the product offering
      href:
        type: string
        description: |
          The self-reference to the product
      name:
        type: string
        description: |
          The name of the product
      referenceId:
        type: string
        description: |
          The unique ID of the product in the cart item hierarchy
      version:
        type: string
        description: |
          The version of the product
      primaryProductId:
        type: string
        description: |
          The unique ID of the product in the product inventory domain
      status:
        type: string
        description: |
          The state of the product in the product inventory domain
      activationDate:
        type: string
        format: date-time
        description: |
          The date on which the cart item is set to active (set by inventory)
      productOrder:
        $ref: '#/definitions/ProductOrderRef'
      relatedParty:
        type: array
        description: |
          The related party that defines the party associated with the product
        items:
          $ref: '#/definitions/RelatedPartyRef'
      productSpecification:
        description: |
          The specification of the product
        $ref: '#/definitions/ProductSpecificationRef'
      characteristic:
        type: array
        description: |
          The characteristics of the product
        items:
          $ref: '#/definitions/ProductCharacteristic'
      productRelationship:
        type: array
        description: |
          The product relation of the product
        items:
          $ref: '#/definitions/ProductRelationship'
      place:
        type: array
        description: |
          The place of the product
        items:
          $ref: '#/definitions/PlaceRef'
      shoppingCart:
        $ref: '#/definitions/ShoppingCartRef'
      metadata:
        type: array
        description: |
          The characteristic of the product
        items:
          $ref: '#/definitions/Metadata'
      terminationDate:
        type: string
        format: date-time
        description: |
          Date on which the product is terminated
      statusReason:
        type: array
        description: |
          The reason of the product state. This property is populated only when the referenced product is a product in the inventory.
        items:
          $ref: '#/definitions/StatusReason'
      businessActivity:
        type: array
        description: |
          Business activities with correlated dates for each activity
        items:
          $ref: '#/definitions/BusinessActivity'
      statusChangeDate:
        type: string
        format: date-time
        description: |
          The product last status chane date.May be equal to the network fulfillment date, or set according to different logic.
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ProductExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the product or the product values
  ProductOrderRef:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the existing product order
      href:
        type: string
        description: |
          Hyperlink to access the product order
      orderItemId:
        type: string
        description: |
          The ID of the order item
    description: |
      The reference to the product order
  ProductSpecificationRef:
    type: object
    properties:
      '@referredType':
        type: string
        description: Generic attribute indicating the name of the class type of the referred resource entity.
        x-dox-NotImplemented: true
      id:
        type: string
        description: |
          The unique ID of the product specification
      href:
        type: string
        description: |
          The self-reference to the product specification
      name:
        type: string
        description: |
          The name of the product specification
      productSpecificationType:
        type: string
        description: |
          The type of the product specification
    description: |
      A ProductSpecificationRef is a refernece to detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.
  ProductCharacteristic:
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the product characteristic
      value:
        type: string
        description: |
          The value of the product characteristic
      valueType:
        type: string
        description: |
          Value type of the product characteristic
      metadata:
        type: array
        description: |
          Metadata of the product characteristic
        items:
          $ref: '#/definitions/Metadata'
      valueMetadata:
        type: array
        description: |
          Metadata of the product characteristic value
        items:
          $ref: '#/definitions/ValueMetadata'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ProductCharacteristicExtensions
        x-dox-NotImplemented: true
  Metadata:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the metadata
      value:
        type: string
        description: |
          Value of the metadata
      metadataType:
        type: string
        description: |
          Type of the metadata
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: MetadataExtensions
        x-dox-NotImplemented: true
    description: |
      Catalog and operational metadata
  ValueMetadata:
    allOf:
    - $ref: '#/definitions/Metadata'
    - type: object
      properties:
        sourceValue:
          type: string
          description: |
            Value of the metadata source
    description: |
      Catalog and operational metadata
  ProductRelationship:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the product relationship. It can be :
          - <i>bundled</i> if the product is a bundle and you want to describe the "bundled" products inside this bundle
          - <i>reliesOn</i> if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)
          - <i>businessRelationship</i> if defined the managed relationship between this product and another product
      subtype:
        type: string
        description: "Specific relation entity subtype. Relevant for several relation types \n"
      product:
        $ref: '#/definitions/Product'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ProductRelationshipExtensions
        x-dox-NotImplemented: true
    description: |
      The product relationship
  PlaceRef:
    type: object
    properties:
      '@referredType':
        type: string
        description: Generic attribute indicating the name of the class type of the referred resource entity.
        x-dox-NotImplemented: true
      id:
        type: string
        description: |
          The ID of the place
      href:
        type: string
        description: |
          The self-reference to the place
      name:
        type: string
        description: |
          A user-friendly name for the place, such as "Paris Store", "London Store", "Main Home"
      role:
        type: string
        description: |
          Role of the place (like -  home delivery, shop retrieval)
    description: |
      Place defines a location generically. Could be a geographic address a geographic address, a geographic location.
  ShoppingCartRef:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique identifier of the shopping cart
      href:
        type: string
        format: url
        description: |
          Hyperlink to access the shopping cart
      validation:
        $ref: '#/definitions/Validation'
      cartItemId:
        type: string
        description: |
          The ID of cart item
    description: |
      The reference to the shopping cart
  Validation:
    type: object
    properties:
      status:
        type: string
        description: |
          The status of the validation, either success or information
      validationMessage:
        type: array
        description: |
          The array of the validation messages
        items:
          $ref: '#/definitions/ValidationMessage'
      configurationChange:
        type: array
        description: |
          The array of the configuration changes
        items:
          $ref: '#/definitions/ConfigurationChange'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ValidationExtensions
        x-dox-NotImplemented: true
    description: |
      The successful validation and configuration change; might still contain the validation message and configuration change (information severity or lower)
  ValidationMessage:
    type: object
    properties:
      id:
        type: string
        description: |
          Non-localized name identifier of the validation message
      text:
        type: string
        description: |
          Localized descriptive validation message
      type:
        type: string
        description: |
          Type of the validation message
      subtype:
        type: string
        description: |
          Distinct code which represents the issue
      parameter:
        type: array
        description: |
          Name/value pair of the validation message
        items:
          $ref: '#/definitions/ValidationMessageParameter'
      severity:
        type: string
        description: |
          Severity of the validation message
      path:
        type: string
        description: |
          Path to the resource part to which the validation message is related
      resource:
        type: array
        description: |
          Resource that is associated with the message
        items:
          $ref: '#/definitions/RelatedResource'
    description: |
      Message associated with the validation failure
  ValidationMessageParameter:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the parameter
      value:
        type: array
        description: |
          Value of the parameter
        items:
          type: string
    description: |
      Name/value pair of the validation message parameter
  RelatedResource:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the resource
      id:
        type: string
        description: |
          Unique identifier of the resource
      variable:
        type: array
        description: |
          Variables related to the resource
        items:
          $ref: '#/definitions/Variable'
      containedResource:
        type: array
        description: |
          Other resources, specs, or offers that are linked to the message but did not trigger the validation message
        items:
          $ref: '#/definitions/ContainedResource'
    description: |
      Resource that is associated with the validation message (that is, triggered the validation failure)
  Variable:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the variable
      id:
        type: string
        description: |
          Unique identifier of the variable
      value:
        type: array
        description: |
          Value(s) of the variable
        items:
          type: string
    description: |
      Variable that is associated with a resource
  ContainedResource:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the resource
      id:
        type: string
        description: |
          Unique identifier of the resource
      variable:
        type: array
        description: |
          Variables that are related to the resource
        items:
          $ref: '#/definitions/Variable'
    description: |
      Resources that are contained in the validation message
  ConfigurationChange:
    type: object
    properties:
      id:
        type: string
        description: |
          Unique identifier of the configuration change
        readOnly: true
        x-dox-DesignNote: |
          A unique identifier of the validation rule or its message.
      text:
        type: string
        description: |
          Localized descriptive configuration change message
        readOnly: true
      type:
        type: string
        description: |
          Implementation discriminator of the configuration change
        readOnly: true
      parameter:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/ConfigurationChangeParameter'
      severity:
        type: string
        description: |
          Severity of the configuration change
        readOnly: true
      path:
        type: string
        description: |
          Path to the configuration change in the resource model
        readOnly: true
      skipRevalidation:
        type: boolean
        description: |
          Indicates whether revalidation of the configuration change is required
        readOnly: true
      patchElement:
        type: array
        items:
          $ref: '#/definitions/PatchElement'
      configurationChangeSource:
        type: array
        description: |
          Holds a list of the impacting components that are involved in action rule
          - enablmentRelation - The action rule has impacting enablment relation functionality or was created by this functionality.
          - commertialRelation - The action rule has impacting commertial relation functionality or was created by this functionality.
          - subscriptionRelation - The action rule has impacting subscription relation or was created by this functionality. functionality
          - catalog - The action rule was created by catalog.
        items:
          type: string
    description: |
      Configuration change recommended for a validated resource
  ConfigurationChangeParameter:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the parameter
        readOnly: true
      value:
        type: array
        description: |
          Value(s) of the parameter
        readOnly: true
        items:
          type: string
      valueType:
        type: string
        description: |
          Types of each Value in the parameter array
          As a default - when empty - the type is string.
          Also will be supported-
          ** HashMap - a jason format representation of key value <string,string> map.
    description: |
      Name/value pair of the configuration change parameters
  PatchElement:
    properties:
      op:
        type: string
        description: |
          Operation that is associated with the patched resource part. Valid values are *add*, *remove*, or *replace*.
      path:
        type: string
        description: |
          Path of this resource part within the patched resource, for example, */note*, */name*, or */orderItem/quantity*
      value:
        type: object
        description: |
          Value of the patched resource part
        properties: {}
    description: |
      Patched resource part
  StatusReason:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the modification reason
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: StatusReasonExtensions
    description: |
      The reason of the product state. This entity is populated only when the referenced product is a product in the inventory.
  BusinessActivity:
    type: object
    properties:
      name:
        type: string
        description: the name of the business activty
      effectiveDate:
        type: string
        format: date-time
        description: the date of the business activty
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: BusinessActivityExtensions
    description: |
      Business Activity include dates that will be used by other system like billing, fulfilment, etc..
  CartTerm:
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the term
      '@type':
        type: string
        description: Generic attribute containing the name of the resource class type
      duration:
        $ref: '#/definitions/Quantity'
      remainingDuration:
        $ref: '#/definitions/Quantity'
      elapsedDuration:
        $ref: '#/definitions/Quantity'
      validFor:
        $ref: '#/definitions/TimePeriod'
      attachment:
        type: array
        items:
          $ref: '#/definitions/Attachment'
      freezeDate:
        type: string
        format: date-time
        description: |
          Date on which the commitment was frozen due to an action performed on the product
      impactType:
        type: string
        description: "Type of the impact on the term of the order item due to an action performed on the product  \n"
      policyId:
        type: string
        description: |
          The ID of the term policy
      metadata:
        type: array
        description: |
          The channel characteristic for the cart item term
        items:
          $ref: '#/definitions/Metadata'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CartItemTermExtensions
        x-dox-NotImplemented: true
    description: |
      The terms of the shopping cart item
  NextAction:
    type: object
    properties:
      nextActionType:
        type: string
        description: |
          next action type can be catalog define limit duration product, catalog define limit duration promotion or customer defined temporary action
      action:
        type: string
        description: |
          Action applied to the cart item (for example - add, suspend, resume, terminate, and so on).
      durationPolicy:
        $ref: '#/definitions/DurationPolicy'
      modifyReason:
        $ref: '#/definitions/ModifyReason'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: NextActionExtensions
    description: |
      Next action in the same order that can be complementary action (for example suspend will have next action resume)
  ModifyReason:
    type: object
    required:
    - action
    - name
    properties:
      name:
        type: string
        description: |
          The name of the modify reason
      reasonText:
        type: string
        description: |
          The text of the modification reason. This property is populated if
          the type of the modification reason requires an input of a free text.
      action:
        type: string
        description: |
          The action performed on the instance of the product offering
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ModifyReasonExtensions
        x-dox-NotImplemented: true
    description: |
      The modification reason associated to the action performed on the
      product offering associated with the cart item
  RelatedImmediatePromotion:
    type: object
    properties:
      id:
        type: string
        description: |
          The instance ID of the related immediate promotion
      itemQualificationType:
        type: string
        description: |
          The type of the qualification result for the item - trigger or benefit
      itemStatus:
        type: string
        description: |
          status os the promotion can be add, revoke or keep
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: RelatedImmediatePromotionExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the related immediate promotion object
  ExternalIdentifier:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the external system
      id:
        type: string
        description: |
          Unique identifier in the external system
      version:
        type: string
        description: |
          Version of the related entity in the external system
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: ExternalIdentifierExtensions
    description: |
      Reference to an external system identifier
  Note:
    type: object
    required:
    - text
    properties:
      id:
        type: string
        description: |
          Identifier of the note
        readOnly: true
      noteType:
        type: string
        description: |
          Type of the note
      date:
        type: string
        format: date-time
        description: |
          Date of the note
      text:
        type: string
        description: |
          Text of the note
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: NoteExtensions
        x-dox-NotImplemented: true
    description: |
      Extra information about a given entity
  ImmediatePromotion:
    type: object
    properties:
      id:
        type: string
        description: |
          The instance ID of the immediate promotion
      status:
        type: string
        description: |
          The status of the immediate promotion
      state:
        type: string
        description: |
          The apply state of the qualified promotion. The state can have the following values:
          - 'applied' - For an immediate promotion that all of it's benefits are applied
          - 'notApplied' - For an immediate promotion that none of it's benefits are applied - future
          - 'partiallyApplied' - For an immediate promotion that part of it's benefits are applied - future
          - 'pendingApply' - Received in the request for an immediate promotion for which certain benefits, which are selected externally by a consuming application, should be applied
      promotion:
        $ref: '#/definitions/PromotionRef'
      productPromotion:
        $ref: '#/definitions/ProductPromotionRef'
      triggerItem:
        type: array
        items:
          $ref: '#/definitions/TriggerItem'
        x-dox-DesignNote: |
          A reference to the TriggerItem  definition.
      benefitItem:
        type: array
        items:
          $ref: '#/definitions/BenefitItem'
        x-dox-DesignNote: |
          A reference to the Benefit definition.
      reason:
        $ref: '#/definitions/ModifyReason'
      relatedParty:
        $ref: '#/definitions/RelatedPartyRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ImmediatePromotionExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the immediate promotion object
  PromotionRef:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the promotion
      name:
        type: string
        description: |
          The name of the promotion
      description:
        type: string
        description: |
          The description of the promotion for the business user
      validFor:
        $ref: '#/definitions/TimePeriod'
      type:
        type: string
        description: |
          The type of the promotion
      priority:
        type: integer
        description: |
          The priority of the promotion
      applyPolicy:
        type: string
        description: "Defines the policy to apply the promotion - can be manual or automatic \n"
      href:
        type: string
        format: url
        description: |
          The self-reference to the promotion
        readOnly: true
    description: |
      The reference to the promotion object
    x-dox-DesignNote: |
      Promotion description for Business user
  ProductPromotionRef:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique identifier of the Product Promotion
      href:
        type: string
        format: url
        description: |
          The hyperlink of the Product Promotion
        readOnly: true
    description: |
      Reference to a ProductPromotionRef
    x-dox-DesignNote: |
      Product Promotion description for Business user
  TriggerItem:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the trigger item
      itemType:
        type: string
        description: |
          The type of the trigger item
      href:
        type: string
        format: url
        description: |
          The self-reference to the trigger item
      promotionCriteriaGroupId:
        type: string
        description: |
          The ID of the promotion criteria group (root or nested) as part of which the item is qualified as a trigger item
      pathToRoot:
        type: string
        description: |
          The path from the current item in the product offering structure to the root. This property is populated if the trigger item is a nested item.
      itemStatus:
        type: string
        description: |
          The status of the trigger item
      triggerItemCharacteristic:
        type: array
        items:
          $ref: '#/definitions/ContextCharacteristic'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: TriggerItemExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the trigger item object
  ContextCharacteristic:
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the characteristic
      contextType:
        type: string
        description: |
          The context type of the characteristic
      valueType:
        type: string
        description: "The value type of the characteristic \n"
      value:
        type: array
        description: |
          The value of the characteristic
        items:
          type: string
    description: |
      The list of dynamic characteristics related to a specific context
  BenefitItem:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the benefit item
      itemType:
        type: string
        description: |
          The type of the benefit item
      promotionCriteriaGroupId:
        type: string
        description: |
          The ID of the promotion criteria group (root or nested) as part of which the item is qualified as a benefit item
      pathToRoot:
        type: string
        description: |
          The path from the current item in the oroduct offering structure to the root. This property is populated if the benefit item is a nested item.
      href:
        type: string
        description: |
          The self-reference to the benefit item
      action:
        type: array
        items:
          $ref: '#/definitions/PromotionAction'
        x-dox-DesignNote: |
          A reference to the Benefit definition.
      itemStatus:
        type: string
        description: |
          The status of the benifit item
      itemState:
        type: string
        description: |
          The apply state of the benefit on a benefit item. The state can have the following values:

          - 'applied' - For a benefit that is applied
          - 'notApplied' - For a benefit that is not applied
          - 'pendingApply' - Received in the request for a benefit, for which the relevant benefit item is selected and should be applied
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: BenefitItemExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the benefit item object
  PromotionAction:
    required:
    - actionType
    properties:
      id:
        type: string
        description: |
          The unique ID of the promotion action
      name:
        type: string
        description: |
          The name of the promotion action
      description:
        type: string
        description: |
          The description of the promotion action
      actionType:
        type: string
        description: |
          The type of the promotion action. The only possible value currently is "Price Alteration".
      actionValue:
        type: integer
        description: |
          The value of the promotion action. If actionType is "Price Alteration", the value is populated with '1'.
      promotionPriceAlteration:
        $ref: '#/definitions/ProductOfferingPriceRef'
      productOfferingBenefit:
        type: array
        description: |
          Reference to a product offering usaed as a free offer benefit by the promotion
        items:
          $ref: '#/definitions/ProductOfferingBenefit'
      durationPolicy:
        $ref: '#/definitions/DurationPolicy'
      validFor:
        $ref: '#/definitions/TimePeriod'
      actionTerminationPolicy:
        type: string
        description: |
          Defines the termination policy upon duration end date
        x-dox-NotImplemented: true
      relatedTriggerItem:
        type: array
        description: "An optional relation from a specific promotion action to a specific trigger item.  \n"
        items:
          $ref: '#/definitions/RelatedTriggerItem'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PromotionActionExtensions
        x-dox-NotImplemented: true
    description: |
      The action of the promotion. When a customer meets the conditions in the 'promotion pattern', the benefits defined in the 'action' can be given to the customer.
  ProductOfferingPriceRef:
    properties:
      id:
        type: string
        description: |
          The unique ID of the promotion action discount
    description: |
      The reference to the promotion action discount. This object represents the pricing entity that defines the actual discount.
  ProductOfferingBenefit:
    type: object
    properties:
      productOfferingId:
        type: string
        description: |
          the id of the product offering granted as a benefit
      promotionPriceAlteration:
        type: array
        description: |
          referecne to price entity representing the actual monetary discount
        items:
          $ref: '#/definitions/ProductOfferingPriceRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ProductOfferingBenefitExtensions
        x-dox-NotImplemented: true
    description: Reference to a product offering used as a free offer benefit by the promotion
  RelatedTriggerItem:
    type: object
    properties:
      id:
        type: string
        description: |
          The unique ID of the related trigger item
      role:
        type: string
        description: |
          The role of the related trigger item
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: RelatedTriggerItemExtensions
        x-dox-NotImplemented: true
    description: |
      A relation to a specific trigger item. For example, for promotion action with actionType = productOffering, this relation indicates a relevant trigger item to which the action should be related. The type of the relation is specified in 'role' field
  ChannelRef:
    type: object
    required:
    - id
    properties:
      id:
        type: string
        description: |
          Unique identifier of the channel
      href:
        type: string
        description: |
          Hypertext reference to the channel
      name:
        type: string
        description: |
          Name of the channel
      role:
        type: string
        description: |
          Role of the channel, for example, *initChannel*
      '@type':
        type: string
        description: |
          Type of the resource
        x-dox-NotImplemented: true
    description: |
      Channel associated with a resource
  Error:
    type: object
    required:
    - code
    - reason
    discriminator: '@type'
    properties:
      code:
        type: string
        description: |
          Error code relevant to an application, defined in the API or in a common list
      reason:
        type: string
        description: |
          Explanation of the reason for the error that can be displayed to a user
      message:
        type: string
        description: |
          Additional information about the error  and corrective actions related to the error that can be displayed to a user
      status:
        type: string
        description: |
          HTTP error code extension
      referenceError:
        type: string
        format: uri
        description: |
          URI of the documentation describing the error
      traceId:
        type: string
        description: |
          Unique tracker ID that is used to facilitate the troubleshooting
      '@type':
        type: string
        description: |
          Type of the error
      characteristic:
        type: array
        description: |
          Charachteristic parameters that are associated with the error
        items:
          $ref: '#/definitions/ErrorCharacteristic'
    description: |
      Error response. This object is used when an API throws an error, typically with a HTTP error response codes 3xx, 4xx, and 5xx
  ErrorCharacteristic:
    type: object
    properties:
      name:
        type: string
        description: |
          Non-localized name identifier of the characteristic
      value:
        type: string
        description: |
          Value of the characteristic
    description: |
      Parameter that is associated with the error entity
  ValidationError:
    allOf:
    - $ref: '#/definitions/Error'
    - properties:
        validationMessage:
          type: array
          description: |
            The validation messages
          items:
            $ref: '#/definitions/ValidationMessage'
    description: |
      Validation error object that is used when an API throws an error, typically with a HTTP error response code 422
  ManageCartItemRelationship:
    type: object
    required:
    - action
    - type
    properties:
      fromCartItemId:
        type: string
        description: |
          The source cart item
      relatedToCartItemId:
        type: string
        description: |
          The cart item connected by the relation
      type:
        type: string
        description: |
          The name of the relation on related cart item ID (for example, replace offer)
      action:
        type: string
        description: |
          The action to be performed: add, remove, or replace
      replacedCartItemRelationship:
        $ref: '#/definitions/ReplacedCartItemRelationship'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ManageCartItemRelationshipExtensions
        x-dox-NotImplemented: true
    description: |
      The details of the relationship
  ReplacedCartItemRelationship:
    type: object
    properties:
      fromCartItemId:
        type: string
        description: |
          The source cart item
      relatedToCartItemId:
        type: string
        description: |
          The cart item connected by the relation
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ReplacedCartItemRelationshipExtensions
        x-dox-NotImplemented: true
    description: |
      The details of the relationship
  ManageCartPriceInstallmentOption:
    type: object
    required:
    - action
    - id
    properties:
      id:
        type: string
        description: |
          The identifier of the order price
      action:
        type: string
        description: |
          The required action - replace, or remove
      installmentOption:
        $ref: '#/definitions/InstallmentOption'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ManageCartPriceInstallmentOptionExtensions
        x-dox-NotImplemented: true
    description: |
      The resource encapsulated the installment option of a cart price
  PriceShoppingCart:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the shopping cart
      externalId:
        type: string
        description: |
          The external identifier that was assigned by consumers
      validFor:
        type: string
        format: date-time
        description: |
          The validity of the shopping cart price
        readOnly: true
      priceCartItem:
        type: array
        items:
          $ref: '#/definitions/PriceCartItem'
      cartTotalPrice:
        type: array
        items:
          $ref: '#/definitions/CartPrice'
      immediatePromotion:
        type: array
        items:
          $ref: '#/definitions/ImmediatePromotion'
        x-dox-DesignNote: |
          A reference to the Immediate Promotions with details
      message:
        type: array
        items:
          $ref: '#/definitions/PriceShoppingCartMessage'
      relatedParty:
        type: array
        description: |
          The party associated with the price product shopping cart
        items:
          $ref: '#/definitions/RelatedPartyRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceShoppingCartExtensions
        x-dox-NotImplemented: true
    description: "The price of the shopping cart. \n"
  PriceCartItem:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the shopping cart item
      action:
        type: string
        description: |
          The action to be performed on the product (or product offering) associated with the shopping cart item
      state:
        type: string
        description: |
          The state of the shopping cart item
      quantity:
        type: integer
        description: |
          The quantity of the shopping cart item
      creationDate:
        type: string
        format: date-time
        description: "The item creation date  \n"
      requestedCompletionDate:
        type: string
        format: date-time
        description: |
          Date on which the cart item was requested to be completed
      productOffering:
        $ref: '#/definitions/ProductOfferingRef'
      priceProduct:
        $ref: '#/definitions/PriceProduct'
      priceCartItem:
        type: array
        items:
          $ref: '#/definitions/PriceCartItem'
      characteristic:
        type: array
        items:
          $ref: '#/definitions/PriceCharacteristic'
      itemTotalPrice:
        type: array
        items:
          $ref: '#/definitions/CartPrice'
      itemPrice:
        type: array
        items:
          $ref: '#/definitions/CartPrice'
      priceItemTerm:
        type: array
        items:
          $ref: '#/definitions/PriceCartTerm'
      modifyReason:
        type: array
        items:
          $ref: '#/definitions/ModifyReason'
      metadata:
        type: array
        items:
          $ref: '#/definitions/Metadata'
      cartItemRelationship:
        type: array
        description: |
          The relationship between the shopping cart items
        items:
          $ref: '#/definitions/CartItemRelationship'
      relatedImmediatePromotion:
        type: array
        items:
          $ref: '#/definitions/RelatedImmediatePromotion'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceShoppingCartExtensions
    description: "The price of the shopping cart item. \n"
  PriceProduct:
    type: object
    properties:
      id:
        type: string
        description: |
          The identifier of the product
      status:
        type: string
        description: |
          The status of the product in the Product Inventory domain
      characteristic:
        type: array
        items:
          $ref: '#/definitions/PriceCharacteristic'
      productSpecification:
        $ref: '#/definitions/ProductSpecificationRef'
      priceProduct:
        type: array
        description: |
          `deprecated`
        items:
          $ref: '#/definitions/PriceProduct'
      activationDate:
        type: string
        format: date-time
        description: "The date on which the product was activated. \n"
      referenceId:
        type: string
        description: |
          The unique ID of the product in the cart item hierarchy
      priceProductRelationship:
        type: array
        items:
          $ref: '#/definitions/PriceProductRelationship'
      primaryProductId:
        type: string
        description: "Unique identifier of the primary product. This property is populated only when the referenced product is a product in the inventory. \n"
      statusReason:
        type: array
        description: |
          The reason of the product state. This property is populated only when the referenced product is a product in the inventory.
        items:
          $ref: '#/definitions/StatusReason'
      businessActivity:
        type: array
        description: |
          Business activities with correlated dates for each activity
        items:
          $ref: '#/definitions/BusinessActivity'
      place:
        type: array
        description: |
          Place of the product
        items:
          $ref: '#/definitions/PlaceRef'
      relatedParty:
        type: array
        description: |
          The related party that defines the party associated with the product
        items:
          $ref: '#/definitions/RelatedPartyRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: PriceProductExtensions
        x-dox-NotImplemented: true
    description: |
      The price of the product
  PriceCharacteristic:
    type: object
    properties:
      name:
        type: string
        description: |
          The name (identifier) of the product characteristic
      value:
        type: string
        description: |
          The value of the product characteristic
      valueType:
        type: string
        description: |
          The value type of the product characteristic
      metadata:
        type: array
        description: |
          Metadata of the characteristic
        items:
          $ref: '#/definitions/Metadata'
      valueMetadata:
        type: array
        description: |
          Metadata of the characteristic value
        items:
          $ref: '#/definitions/ValueMetadata'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceCharacteristicExtensions
        x-dox-NotImplemented: true
    description: |
      The product characteristic
  PriceProductRelationship:
    type: object
    properties:
      type:
        type: string
        description: |
          Type of the product relationship. It can be :
          - <i>bundled</i> if the product is a bundle and you want to describe the "bundled" products inside this bundle
          - <i>reliesOn</i> if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product)
          - <i>businessRelationship</i> if defined the managed relationship between this product and another product
          - <i>priceContribution</i> if one of the product prices is impacted by other prouct
      subtype:
        type: string
        description: "Specific relation entity subtype. Relevant for several relation types \n"
      priceProduct:
        $ref: '#/definitions/PriceProduct'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceProductRelationshipExtensions
    description: |
      The product relationship
  PriceCartTerm:
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the term
      type:
        type: string
        description: |
          The type of the term
      duration:
        $ref: '#/definitions/Quantity'
      remainingDuration:
        $ref: '#/definitions/Quantity'
      elapsedDuration:
        $ref: '#/definitions/Quantity'
      validFor:
        $ref: '#/definitions/TimePeriod'
      freezeDate:
        type: string
        format: date-time
        description: |
          Date on which the commitment was frozen due to an action performed on the product
      impactType:
        type: string
        description: "Type of the impact on the term of the order item due to an action performed on the product  \n"
      policyId:
        type: string
        description: |
          The ID of the term policy
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceCartTermExtensions
        x-dox-NotImplemented: true
    description: |
      The terms of the product offering that could impact the price
  PriceShoppingCartMessage:
    type: object
    properties:
      type:
        type: string
        description: |
          The PriceShoppingCartMessage implementation discriminator
        readOnly: true
      text:
        type: string
        description: |
          The localized descriptive validation message
        readOnly: true
      path:
        type: string
        description: |
          The path to the nested Price Product Cart
        readOnly: true
      severity:
        type: string
        description: |
          The message severity
        readOnly: true
      parameter:
        type: array
        description: |
          The message parameter
        readOnly: true
        items:
          $ref: '#/definitions/PriceShoppingCartMessageParameter'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceShoppingCartMessageExtensions
        x-dox-NotImplemented: true
    description: |
      The message related to a Price Product Cart
  PriceShoppingCartMessageParameter:
    type: object
    properties:
      name:
        type: string
        description: |
          The name of the parameter
        readOnly: true
      value:
        type: array
        description: |
          The value(s) of the parameter
        readOnly: true
        items:
          type: string
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PriceShoppingCartMessageParameterExtensions
        x-dox-NotImplemented: true
    description: |
      The name/value pair of the message parameter
  ShoppingCartPotentialPromotionQualification:
    type: object
    properties:
      potentialQualificationItem:
        type: array
        items:
          $ref: '#/definitions/PotentialQualificationItem'
      shoppingCart:
        $ref: '#/definitions/ShoppingCartRef'
      relatedParty:
        type: array
        description: |
          The party associated with the price shopping cart
        items:
          $ref: '#/definitions/RelatedPartyRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ShoppingCartPotentialPromotionQualificationExtensions
        x-dox-NotImplemented: true
    description: |
      The envelope for all cart items for which the calling application requests to perform the potential promotion qualification
  PotentialQualificationItem:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the instance of the promotion qualification item
      productOffering:
        $ref: '#/definitions/ProductOfferingRef'
      potentialPromotion:
        type: array
        description: |
          The result of the qualification process, which is the potential promotion for the cart item
        readOnly: true
        items:
          $ref: '#/definitions/PotentialPromotion'
        x-dox-DesignNote: |
          Result of the qualification.
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PotentialQualificationItemExtensions
        x-dox-NotImplemented: true
    description: |
      The cart item for which the promotion qualification process is requested.
      This object can be provided in the input to limit the qualification.
      The result of the qualification process is returned in the response.
  PotentialPromotion:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the potential promotion
      promotion:
        $ref: '#/definitions/PromotionRef'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PotentialPromotionExtensions
        x-dox-NotImplemented: true
    description: |
      The reference to the potential promotion. This object might be used in the future to add qualification execution data.
  CartPriceInstallmentOption:
    type: object
    properties:
      id:
        type: string
        description: |
          The identifier of the cart price
      installmentOption:
        type: array
        items:
          $ref: '#/definitions/OptionalInstallmentOption'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CartPriceInstallmentOptionExtensions
        x-dox-NotImplemented: true
    description: |
      The resource encapsulated the installment option of an cart price
  OptionalInstallmentOption:
    type: object
    properties:
      id:
        type: string
        description: |
          The identifier of the installment option
      numberOfInstallments:
        type: integer
        description: |
          The number of installments
      minNumberOfInstallments:
        type: integer
        description: |
          The minimal number of installments
      maxNumberOfInstallments:
        type: integer
        description: |
          The maximal number of installments
      defaultNumberOfInstallments:
        type: integer
        description: |
          The number of installments
      downPayment:
        $ref: '#/definitions/PaymentAmount'
      minDownPayment:
        $ref: '#/definitions/PaymentAmount'
      maxDownPayment:
        $ref: '#/definitions/PaymentAmount'
      defaultDownPayment:
        $ref: '#/definitions/PaymentAmount'
      installmentOptionPrice:
        type: array
        items:
          $ref: '#/definitions/InstallmentOptionPrice'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: OptionalInstallmentOptionExtensions
        x-dox-NotImplemented: true
    description: |
      Represents an installment option of an cart price
  InstallmentOptionPrice:
    type: object
    properties:
      id:
        type: string
        description: |
          The ID of the cart item price
      name:
        type: string
        description: |
          The short descriptive name, such as subscription price
      description:
        type: string
        description: |
          The narrative that explains in detail the semantics of this entity (cart/cart item) price
      priceType:
        type: string
        description: |
          The category that describes the price charged for a cart/cart item
      unitOfMeasure:
        type: string
        description: |
          The unit of measurement applicable for the price type allowance, for example, GB, minutes, and so on.
      recurringChargePeriod:
        type: string
        description: |
          The period to which to repeat the application of the recurring price (either 'days', 'weeks', 'months', or 'years'). This property is populated only if the price type is 'recurring'
      recurringChargePeriodLength:
        type: integer
        description: |
          The period length of the recurring charge.
      taxIncluded:
        type: string
        description: Indicates if the price is defined in the catalog one as tax included or as tax excluded. Valid Values - Excluded, Included
      role:
        type: string
        description: |
          The role of the price, for example, price, bundle price alteration, and so on
      price:
        $ref: '#/definitions/Price'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: InstallmentOptionPriceExtensions
        x-dox-NotImplemented: true
    description: |
      The price relevant for the installment option: OC-Installment, RC-Installment, External Override charge
  CheckoutShoppingCart:
    type: object
    properties:
      productOrderRef:
        $ref: '#/definitions/ProductOrderRef'
      shoppingCart:
        $ref: '#/definitions/ShoppingCart'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: CheckoutShoppingCartExtensions
        x-dox-NotImplemented: true
    description: "The resource that include information about the shopping cart and related order that created in the as result of the checkout.\nProductOrderRef includes only reference to order, orderItemID is not relevant (empty) for Checkout  \n"
  ModifyShoppingCart:
    type: object
    properties:
      id:
        type: string
        description: |
          Unique identifier of the shopping cart
      description:
        type: string
        description: |
          Description of the shopping cart
      modifyCartItem:
        type: array
        description: |
          The modify cart item definition
        items:
          $ref: '#/definitions/ModifyCartItem'
      externalIdentifier:
        type: array
        description: |
          The list of external identifiers related to the shopping cart
        items:
          $ref: '#/definitions/ExternalIdentifier'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ModifyShoppingCartExtensions
        x-dox-NotImplemented: true
    description: |
      The shopping cart that includes cart items that captures data for modifying the customer-owned product
  ModifyCartItem:
    type: object
    properties:
      id:
        type: string
        description: |
          Unique identifier of the cart item
      modifyReason:
        type: array
        description: |
          The modify reason associated to the action to be performed on the customer-owned product
        items:
          $ref: '#/definitions/ModifyReason'
      externalIdentifier:
        type: array
        description: |
          The list of external identifiers related to the cart Item 'Not implemented'
        items:
          $ref: '#/definitions/ExternalIdentifier'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: ModifyCartItemExtensions
        x-dox-NotImplemented: true
    description: |
      The cart item that captures data involved with modifying the customer-owned product
  PhoneNumberProduct:
    type: object
    properties:
      isPortIn:
        type: string
        description: |
          Indicates whether the number is ported in
      phoneNumber:
        type: string
        description: |
          The phone number that is used if this property is populated.
          If the number is ported in, this property can include the temporary number, or the number that is used permanently.
      portedNumber:
        type: string
        description: |
          The number the customer wishes to port in
      previousProvider:
        type: string
        description: |
          The former operator name/ID
      resourceCategory:
        type: string
        description: |
          The type of the phone number
      modifyReason:
        $ref: '#/definitions/ModifyReason'
      characteristic:
        type: array
        items:
          $ref: '#/definitions/ProductCharacteristic'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
          x-amdocs:
            refDefinition: PhoneNumberProductExtensions
        x-dox-NotImplemented: true
    description: |
      The information about the phone number
  ManageRequestedDate:
    type: object
    properties:
      action:
        type: string
        description: |
          Action performed on the order item - add, remove, or replace
      date:
        type: array
        description: |
          Requested date
        items:
          $ref: '#/definitions/RequestedDate'
      id:
        type: string
        description: |
          Unique identifier of the top-most cart item
      cartItemRequestedDate:
        type: array
        description: |
          Requested date of the nested cart item
        items:
          $ref: '#/definitions/CartItemRequestedDate'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: ManageRequestedDateExtensions
        x-dox-NotImplemented: true
    description: |
      Management of the shopping cart dates
  RequestedDate:
    type: object
    properties:
      name:
        type: string
        description: |
          Name of the date field
      value:
        type: string
        format: date-time
        description: |
          Value of the date field
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: RequestedDateExtensions
        x-dox-NotImplemented: true
    description: |
      Requested date of the product order or the order item
  CartItemRequestedDate:
    type: object
    properties:
      id:
        type: string
        description: |
          Unique identifier of the order item requested date
      action:
        type: string
        description: |
          Action performed on the order item - add, remove, or replace
      date:
        type: array
        description: |
          Requested date
        items:
          $ref: '#/definitions/RequestedDate'
      extensions:
        type: object
        additionalProperties:
          type: object
          properties: {}
        x-amdocs:
          refDefinition: OrderItemRequestedDateExtensions
        x-dox-NotImplemented: true
    description: |
      Requested date of the order item
parameters:
  query-relatedPartyID:
    name: relatedPartyId
    in: query
    description: |
      The ID of the related party.
    required: false
    type: string
  query-role:
    name: role
    in: query
    description: |
      The role of the related party.
    required: false
    type: string
  query-place-role:
    name: role
    in: query
    description: |
      The role of the place.
    required: false
    type: string
  query-placeID:
    name: placeId
    in: query
    description: |
      The ID of the place.
    required: false
    type: string
  query-rootProductId:
    name: rootProductId
    in: query
    description: |
      The root ID of the customer-owned product.
    required: false
    type: string
  query-shoppingCartId:
    name: shoppingCartId
    in: query
    description: |
      The id of the shopping cart.
    required: false
    type: string
  query-nestedPriceCartItemId:
    name: nestedPriceCartItemId
    in: query
    description: |
      The ID of the nested cart item.
    required: false
    type: string
  query-cartPriceId:
    name: cartPriceId
    in: query
    description: |
      The IDs of the relevant cart price.
      If it is not provided, all the cart prices are assumed to be relevant.
    required: false
    type: array
    items:
      type: string
    collectionFormat: multi
x-dox-DesignDocs:
- description: |
    Shopping Cart
  url: https://confluence/display/DEP/Shopping+Cart+Mangement